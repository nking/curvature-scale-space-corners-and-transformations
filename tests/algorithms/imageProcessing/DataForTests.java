package algorithms.imageProcessing;

import algorithms.imageProcessing.scaleSpace.CurvatureScaleSpaceCornerDetector;
import algorithms.imageProcessing.util.MatrixUtil;
import algorithms.util.PairFloatArray;
import algorithms.util.PairInt;
import algorithms.util.PairIntArray;
import algorithms.util.ResourceFinder;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.HashSet;
import java.util.Set;
import org.ejml.simple.*;
    
/**
 *
 * @author nichole
 */
public class DataForTests {
    
     /**
     * dataset from 'Merton College I" at
     * http://www.robots.ox.ac.uk/~vgg/data/data-mview.html
     * 
     * @return 
     */
    public static SimpleMatrix readMerton1UnnormalizedX1Data() {
        
        double[][] x1 = new double[3][];
        
        x1[0] = new double[]{676.587, 675.319, 908.129, 906.945, 907.284, 906.742, 906.447, 717.231,
        540.106, 659.06,  948.04,  84.722, 224.362, 708.462, 540.541, 842.513,
        145.319, 599.525, 202.223,  70.096, 580.71,  579.254, 225.174, 905.638,
        585.17,  674.36,  224.807, 432.705, 602.217, 605.064,  87.13,  517.801,
        537.234, 275.083,  74.254, 145.851, 685.191, 455.365,  61.619, 386.99,
         45.405,  60.262, 951.115, 812.927, 356.008,  61.382, 385.047,  58.727,
        948.143, 371.827,  47.343, 676.781,  87.316, 381.895, 586.808,  83.106,
        576.635, 290.638, 757.883, 517.551, 145.05,  365.203, 884.362, 514.23,
        405.142, 959.959, 834.807, 736.695, 240.613, 201.982, 766.748, 735.915,
        436.262, 847.984, 365.374, 951.49,  319.712, 800.284, 300.316, 690.206,
        734.901, 152.558, 934.547,  87.019, 341.699, 760.281,  49.619, 734.667,
        257.137, 547.383, 586.727, 945.511, 250.669,  55.487, 806.008, 878.711,
         75.616, 184.88,  361.185, 917.909, 731.193, 849.323,  46.783, 400.726,
         52.479, 416.626, 956.683, 157.032, 513.174, 188.643, 898.435, 864.98,
        508.839, 740.249, 198.505,  78.426, 148.033, 820.272, 346.482, 188.709,
        279.51,  207.889, 930.209, 556.144, 364.166, 556.133, 370.815, 329.578,
        444.973,  49.175,  87.012, 221.296, 657.421, 169.247,  95.897, 662.606,
         97.698, 492.969, 608.028, 529.102, 492.157,  76.689, 359.268, 254.002,
        330.505, 101.533,  58.259, 909.584, 117.494,  41.126, 327.038, 741.886,
        649.636, 651.878, 557.213, 356.425,  47.965, 396.004, 416.846,  73.8,
        785.982, 839.136, 926.039,  92.019, 809.528, 426.677, 361.882, 638.325,
        170.97,  876.309, 385.179, 328.886, 321.021, 360.791,  85.107, 799.126,
        366.684, 607.313, 564.811, 351.834, 557.808, 396.303, 480.374, 633.43,
        419.052, 725.82,  102.814, 182.984, 808.018,  70.46,  778.558, 365.06,
        395.967, 350.777, 664.863, 226.269, 429.939,  58.577, 925.226,  59.23,
         78.532, 605.011, 785.849, 343.261, 661.198, 139.568, 385.275, 329.386,
        420.63,  122.228, 708.172, 883.536, 347.494, 627.955, 432.454, 660.651,
         84.791, 477.694, 694.422,  51.041, 693.791, 831.923, 739.769, 119.842,
        327.012, 656.517, 400.562, 820.868, 284.271,  53.264, 583.893, 373.452,
        918.73,  773.312,  75.385,  75.078, 935.938, 932.456, 842.471, 939.636,
        202.274, 591.271, 202.067, 202.085, 509.703, 728.569, 725.024, 628.266,
        360.919, 675.735, 361.649, 213.034, 188.811,  86.989, 441.464, 288.2,
        101.808, 827.788, 117.283, 140.619, 260.083, 749.292, 816.107, 839.928,
        183.023, 129.535, 181.413, 423.551, 570.846, 305.571, 789.116, 604.038,
        509.424, 650.614, 434.22,  875.972, 849.74,  775.31,  886.118, 797.641,
        103.813, 421.285, 406.729, 681.781, 114.423, 488.8,  553.099, 672.559,
        542.127, 580.214, 106.953, 257.414, 659.264, 386.578, 602.578, 352.274,
        270.96,  842.163, 388.185, 896.311, 188.304, 435.921, 734.57,  411.728,
        787.28,  178.361, 273.905, 567.648, 107.254, 525.415, 741.027, 220.886,
        606.357, 173.569, 368.121, 350.203, 364.355, 780.185, 218.191, 503.212,
        113.892, 353.116, 614.506, 471.455, 521.201, 637.539, 353.311, 271.041,
        271.822, 920.188, 375.931, 738.577, 593.056, 102.509, 884.849, 174.405,
         86.67,  701.442, 638.662, 579.175, 873.47,  699.851, 165.902, 539.96,
        323.272, 318.493, 758.27,  84.925, 252.687, 633.17,  870.68,  702.401,
        834.409, 626.396, 816.21,  739.032, 407.527, 191.436, 102.468, 796.362,
        136.806,  97.263, 637.909, 402.625, 480.922, 170.815, 930.033, 340.466,
         97.294, 929.123, 814.732, 522.375, 217.593, 308.182, 371.654, 892.057,
        732.986, 102.131, 285.421, 804.602, 162.083, 834.02,  269.223, 890.903,
        782.452, 507.605, 564.928, 389.575, 535.319, 699.413, 283.356, 914.943,
        191.88,  268.208, 318.006, 238.758, 478.66,  627.834, 258.905, 396.782,
        115.148, 248.161, 153.813, 164.139, 181.35,  290.707, 751.938, 346.632,
        638.813, 584.515, 682.158, 564.991, 407.477, 571.866, 860.071, 226.657,
        147.625, 351.592, 756.399, 219.671, 491.125, 200.546, 310.878, 879.728,
        271.139, 369.447, 904.085, 833.129, 201.832, 302.674, 470.211, 889.441,
        418.869, 375.156, 532.211, 393.434,  85.,  91.988, 835.49,  477.868,
        206.508, 830.469, 784.82,  310.123, 837.262, 257.771, 469.617, 293.893,
        404.715, 433.112, 429.531, 130.979, 406.699, 427.954, 144.197, 889.119,
        831.317, 860.992, 834.059, 153.368, 485.949, 640.31,  146.581, 936.173,
        456.18,  925.744, 467.891, 864.66,  303.82,  461.46,  261.508, 469.035,
        873.981, 314.234, 331.163, 368.868, 745.429, 820.611, 101.204, 816.936,
        241.811, 451.204, 479.229, 475.771};
        x1[1] = new double[]{424.715, 394.656, 398.806, 384.96,  388.564, 373.851, 370.52,  234.166,
        403.087, 394.883, 431.453, 454.708, 451.941, 152.925, 426.223, 268.827,
         73.161, 425.61,  411.735, 458.704, 402.416, 179.536, 402.134, 360.022,
        429.141, 368.433, 439.057,  99.828, 397.06,  293.494, 427.859, 215.129,
        376.866,  53.568, 101.593,  31.91,  70.568, 135.899,  51.048, 240.371,
         94.986,  98.981, 106.089, 172.567, 489.063, 370.17,  120.743,  36.707,
        344.338, 238.154,  33.856, 184.452, 399.672, 268.496,  69.751, 272.282,
        372.968, 133.307, 284.658, 196.124, 138.536, 265.029,  30.946, 192.589,
        269.163,  86.162,  10.752, 357.861, 137.264, 388.113, 485.283, 304.146,
         65.877, 196.128, 250.199, 124.211, 178.227,  16.358, 146.504, 373.484,
        291.683, 129.284,  55.579,  82.428, 105.409, 170.201, 384.694, 163.371,
        107.538, 131.97,  75.404,  16.56,  368.175, 381.187, 188.095, 376.113,
         79.259, 210.281, 213.084, 103.941, 337.348, 162.403,  73.343, 143.853,
        452.505, 232.512, 332.228,  66.687, 233.748, 378.389, 125.087,  26.857,
        479.,   465.753, 119.443, 399.554, 162.975,  18.,   194.039, 383.778,
        294.95,  136.833, 152.549, 356.257, 456.384, 385.467,  66.156,  60.587,
        161.702, 489.948, 191.846,  87.84,  86.547, 233.735, 183.456, 469.025,
        361.292, 420.807, 219.725, 368.459, 374.606, 506.104, 400.037, 221.296,
        430.508, 248.709, 473.015,  76.452, 201.828, 278.571, 452.884,  50.46,
        213.133, 468.958, 100.314,  74.066, 352.361, 190.466, 372.025, 311.016,
        128.158, 437.041,  32.536, 213.629, 373.099, 382.378, 389.934,  66.028,
        350.163, 176.122, 414.182, 106.043,  86.285, 329.601, 225.016, 310.927,
         98.477,  35.064, 206.859, 170.187, 113.01,  127.093, 185.779, 387.93,
        479.726, 296.803, 503.642, 234.467, 358.837, 343.99,  335.063, 484.013,
         74.112, 337.314, 142.931, 494.623, 290.643, 505.721,  41.364, 343.97,
        288.902, 467.704, 372.396,  44.153, 144.687, 414.731,  70.302, 437.517,
        362.471, 504.187, 300.091, 122.386, 416.692,  27.205, 196.666,  58.379,
        247.392, 408.269,  46.065, 344.797,  19.566, 466.801, 397.329, 287.413,
         22.352, 354.818,  68.964, 231.259, 304.091, 118.431,  23.159,  51.07,
        180.569, 204.861, 248.673, 231.217, 372.702, 404.1,  125.557, 372.203,
        452.661, 178.454, 439.064, 425.419, 103.842, 204.589, 199.171, 140.483,
        202.193, 163.931, 196.568, 455.019, 455.259, 441.719, 178.248, 148.995,
        272.903, 144.388,  64.749, 146.338, 169.342, 170.656,  33.034, 142.271,
        279.791,  54.871, 367.564, 173.906, 186.028, 168.,   176.366, 239.05,
        134.684, 369.391, 419.295,  81.874, 151.283, 374.639, 348.265, 146.939,
         47.903,  44.954, 124.882, 356.706,  50.738, 179.748, 257.931, 196.202,
        249.321, 147.942, 370.498, 290.2,  178.795, 254.727, 361.056, 380.213,
        288.033, 103.262, 281.56,  146.144, 440.761, 456.548, 239.376,  77.725,
         85.938, 398.565, 161.999, 255.598, 388.628,  53.78,  419.195, 352.481,
        352.512, 143.299, 225.251, 388.759, 279.974, 390.335,  99.116,  47.166,
         88.474, 455.016, 242.549,  47.669, 493.853, 359.287, 302.097, 245.548,
        220.394, 137.263, 200.752, 439.524, 211.972, 196.369, 102.639, 398.988,
        390.903, 193.052, 438.534, 161.034, 338.121, 188.04,  488.105, 212.226,
        471.732, 166.53,  149.154, 201.91,  399.524, 204.347, 371.603, 213.048,
        364.69,  378.716, 420.164, 127.155, 323.337, 168.948,  85.183, 140.468,
        488.96,  466.206, 200.025, 473.641, 472.056, 202.871, 131.776, 476.542,
        378.281,  78.942, 372.206, 358.094, 134.245, 477.081, 137.415,  92.451,
        409.984, 226.383, 225.749, 433.147, 134.031, 298.826, 450.185, 154.769,
        120.8,  175.985, 363.928, 485.083, 194.706, 472.387, 432.694, 315.815,
         43.287, 484.262, 436.838, 378.763, 382.836, 352.255, 244.408, 467.263,
        503.269, 456.537, 417.031, 461.574, 188.886, 368.71,  78.048, 451.429,
        185.448, 349.959, 472.088, 437.948, 460.498, 216.472, 113.73,  353.833,
        500.656, 361.048, 382.169, 496.663, 404.703, 490.834, 189.911, 182.098,
        266.206, 445.129, 329.037, 376.635, 482.216, 481.953, 376.089,  79.965,
        105.85,  441.131, 255.224, 444.464, 363.059, 136.735, 314.313, 336.849,
         95.316, 432.795, 293.879, 481.773,  51.607, 482.605, 215.071, 476.812,
        439.011, 221.501, 398.366, 501.203, 370.56,  223.257, 470.22,  214.654,
        418.441, 163.519, 410.841, 389.779, 336.74,  232.508, 414.583, 320.026,
        374.564, 320.845,  59.397, 309.268, 369.757, 333.077, 387.455, 336.843,
        198.149, 411.251, 486.309, 327.435, 396.512, 260.612, 235.161, 253.021,
        362.839, 333.364, 441.16,  429.052};
        x1[2] = new double[]{1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.};
        
        return new SimpleMatrix(x1);
    }

    /**
     * dataset from 'Merton College I" at
     * http://www.robots.ox.ac.uk/~vgg/data/data-mview.html
     * 
     * @return 
     */
    public static SimpleMatrix readMerton1UnnormalizedX2Data() {
        
        double[][] x2 = new double[3][];
                
        x2[0]= new double[]{689.792,  688.621,  951.71,  951.48,  951.449,  951.327,  951.042,
        737.73,  532.714,  670.398,  997.464,  59.839,  211.447,  723.561,
        533.068,  879.181,  127.745,  602.231,  187.336,  43.995,  579.04,
        575.04,  212.198,  949.581,  586.413,  687.866,  211.482,  422.112,
        605.321,  609.026,  62.738,  509.628,  530.317,  262.811,  49.211,
        128.169,  699.719,  444.326,  34.623,  379.036,  16.872,  32.969,
        998.04,  850.672,  350.261,  35.683,  367.628,  31.136, 1000.549,
        363.74,   18.089,  690.931,  63.118,  374.088,  570.806,  58.923,
        575.359,  276.64,  792.633,  504.798,  127.145,  357.25,  908.632,
        500.618,  397.956, 1004.332,  848.826,  762.044,  225.115,  187.294,
        793.883,  760.647,  413.591,  888.451,  357.863, 1001.274,  313.462,
        810.551,  287.255,  708.361,  759.761,  133.515,  971.017,  63.754,
        321.822,  787.198,  21.979,  755.983,  241.403,  532.914,  570.07,
        976.181,  241.701,  29.286,  842.734,  922.666,  50.595,  169.906,
        355.5,   959.709,  755.36,  889.903,  17.528,  387.346,  24.607,
        409.058, 1010.854,  138.314,  504.405,  174.672,  940.01,  886.037,
        500.438,  765.559,  179.225,  52.449,  131.522,  833.319,  340.712,
        174.057,  270.687,  191.073,  981.225,  553.727,  357.687,  553.245,
        343.962,  302.912,  433.485,  21.301,  63.072,  199.86,  653.359,
        152.902,  73.243,  675.488,  76.463,  485.318,  616.643,  521.465,
        483.973,  51.853,  353.271,  244.31,  323.085,  79.232,  31.1,
        946.059,  97.748,  12.645,  319.778,  747.142,  662.603,  664.831,
        540.402,  330.923,  20.145,  388.989,  410.434,  49.197,  811.215,
        877.148,  957.153,  67.809,  844.215,  420.124,  355.484,  629.012,
        156.026,  922.391,  378.89,  309.034,  298.837,  354.069,  61.58,
        832.868,  344.948,  566.547,  562.152,  341.879,  543.074,  382.855,
        467.866,  642.877,  412.273,  749.879,  82.017,  168.911,  842.644,
        44.969,  809.134,  359.032,  369.566,  344.196,  671.477,  215.439,
        423.263,  30.736,  956.885,  32.465,  54.654,  609.658,  817.779,
        304.395,  667.801,  122.12,  359.007,  322.037,  413.541,  102.915,
        729.178,  922.434,  341.031,  589.704,  423.866,  654.831,  62.163,
        469.243,  691.688,  23.258,  660.858,  869.888,  765.453,  99.772,
        284.751,  670.148,  372.238,  857.616,  275.929,  42.062,  542.742,
        340.343,  970.518,  804.076,  50.613,  51.351,  983.941,  979.075,
        875.343,  987.509,  187.829,  588.715,  187.665,  187.2,   495.622,
        754.377,  750.605,  628.235,  355.617,  687.08,  356.718,  199.658,
        173.707,  62.535,  429.553,  274.683,  79.164,  861.463,  97.258,
        123.697,  252.085,  774.631,  848.55,  875.432,  167.555,  110.26,
        167.45,  411.207,  566.019,  295.211,  822.429,  609.635,  495.046,
        660.974,  427.681,  908.234,  888.164,  806.183,  930.195,  827.121,
        81.946,  395.439,  396.271,  699.036,  94.042,  474.886,  548.793,
        689.268,  537.07,  575.515,  86.809,  247.604,  669.633,  378.748,
        607.587,  345.861,  261.284,  874.983,  380.403,  941.349,  173.314,
        428.965,  759.784,  385.507,  816.091,  164.435,  262.843,  565.278,
        86.845,  510.902,  766.421,  209.092,  612.528,  157.207,  360.252,
        343.434,  357.056,  810.119,  196.83,  489.305,  93.88,  346.838,
        621.634,  455.579,  534.457,  647.61,  346.886,  261.235,  262.032,
        967.206,  370.37,  763.893,  597.325,  80.183,  920.485,  160.08,
        62.501,  722.947,  649.175,  574.624,  917.008,  719.856,  150.681,
        532.963,  316.336,  308.391,  781.593,  60.597,  243.269,  642.896,
        912.775,  723.185,  873.076,  635.174,  851.882,  755.868,  401.512,
        179.938,  80.676,  825.221,  119.036,  75.142,  648.761,  395.975,
        472.759,  154.356,  977.793,  333.572,  75.444,  967.934,  849.745,
        514.193,  201.235,  300.791,  355.395,  927.391,  758.034,  80.012,
        276.727,  838.077,  142.849,  872.772,  260.441,  936.385,  805.868,
        493.054,  562.873,  383.145,  525.452,  718.615,  274.953,  963.217,
        161.665,  259.617,  310.24,  227.489,  471.119,  637.044,  248.331,
        390.948,  95.327,  238.776,  137.345,  148.451,  167.805,  283.534,
        763.337,  339.765,  646.834,  586.107,  699.097,  562.857,  401.26,
        573.047,  894.045,  215.551,  130.617,  345.703,  784.329,  208.213,
        483.284,  187.844,  304.945,  924.8,   261.143,  362.703,  951.107,
        871.43,  189.091,  294.764,  462.905,  922.589,  408.419,  369.153,
        525.957,  386.976,  61.695,  69.445,  874.487,  470.2,   184.149,
        868.018,  817.041,  303.027,  871.976,  248.021,  463.911,  285.713,
        398.111,  426.655,  422.991,  112.991,  400.524,  421.031,  127.148,
        933.97,  869.142,  904.735,  872.142,  136.859,  477.875,  651.372,
        129.264,  987.204,  449.283,  975.193,  451.333,  906.626,  295.891,
        454.072,  251.8,   461.752,  916.748,  306.069,  324.542,  362.06,
        771.982,  857.041,  78.059,  853.337,  231.656,  444.864,  470.376,
        466.728};
        x2[1]= new double[]{460.223, 428.371, 438.48,  424.162, 428.005, 412.185, 409.085, 260.076,
        433.89,  428.393, 473.34,  506.364, 496.859, 172.184, 458.77,  300.105,
        68.88,  458.976, 452.946, 512.345, 434.035, 195.956, 440.976, 397.992,
        462.633, 400.741, 482.42,  106.342, 428.753, 318.621, 475.239, 231.852,
        405.928,  51.444,  99.568,  21.761,  84.279, 145.556,  40.431, 259.24,
        91.271,  96.19,  132.815, 198.268, 533.548, 410.314, 127.653,  23.446,
        383.014, 256.882,  19.859, 205.37,  443.279, 290.615,  78.214, 296.953,
        402.645, 140.667, 315.891, 211.441, 144.065, 286.542,  50.74,  207.339,
        291.147, 111.966,  27.369, 392.299, 143.451, 425.878, 526.24,  334.854,
        68.86,  224.155, 270.125, 152.342, 191.129,  31.428, 154.821, 406.926,
        321.669, 132.161,  78.21,  78.217, 109.876, 193.725, 427.025, 185.12,
        110.549, 143.43,  85.051,  38.273, 402.943, 423.702, 214.821, 414.418,
        73.653, 225.515, 229.375, 129.288, 369.959, 188.818,  65.543, 153.819,
        506.121, 250.729, 370.952,  62.393, 252.796, 416.153, 150.988,  45.303,
        515.967, 505.988, 122.568, 443.4,  171.162,  33.938, 208.955, 421.873,
        320.595, 142.461, 182.119, 384.772, 496.917, 415.778,  67.135,  59.898,
        174.428, 549.363, 203.135,  87.07,  99.007, 252.46,  194.443, 507.899,
        398.782, 453.514, 240.791, 396.768, 404.082, 566.752, 434.699, 238.807,
        470.064, 269.151, 529.234,  99.422, 215.967, 304.292, 494.616,  64.362,
        235.374, 507.664, 109.129,  75.182, 389.889, 204.97,  403.155, 341.451,
        149.206, 477.382,  54.187, 228.89,  409.834, 413.848, 424.872,  76.601,
        384.022, 204.611, 449.93,  110.023,  88.167, 357.229, 241.766, 344.054,
        102.521,  41.015, 225.002, 181.632, 123.623, 135.424, 200.091, 420.327,
        520.484, 326.327, 562.547, 253.007, 394.493, 378.656, 369.069, 527.523,
        76.275, 366.912, 159.79,  545.74,  314.399, 567.076,  63.289, 379.33,
        315.188, 505.081, 407.832,  41.978, 161.309, 458.699,  72.617, 477.415,
        392.551, 561.981, 329.921, 147.238, 454.188,  33.51,  212.49,  69.499,
        267.814, 440.481,  57.455, 380.594,  28.609, 509.032, 433.657, 314.284,
        17.55,  386.188,  69.958, 259.732, 330.479, 120.871,  28.075,  50.267,
        211.437, 230.097, 269.533, 250.221, 411.887, 444.753, 149.068, 411.706,
        498.778, 194.962, 483.062, 468.145, 112.227, 229.341, 223.343, 155.499,
        218.02,  183.078, 211.744, 500.556, 502.376, 491.477, 191.456, 157.259,
        296.767, 168.232,  58.402, 152.448, 180.796, 193.604,  50.388, 166.493,
        304.049,  47.4,  404.169, 186.495, 202.488, 178.779, 200.964, 260.938,
        145.492, 401.069, 454.241, 104.062, 176.947, 410.31,  385.466, 169.959,
        39.058,  45.559, 133.218, 388.879,  42.292, 192.975, 279.025, 218.151,
        270.166, 162.047, 409.329, 315.236, 198.672, 275.082, 391.365, 413.605,
        313.141, 125.016, 304.739, 173.05,  485.972, 494.259, 266.221,  80.525,
        105.306, 439.648, 172.058, 277.301, 430.097,  59.363, 456.642, 386.644,
        382.504, 149.267, 243.344, 423.076, 302.664, 426.296,  99.93,  51.747,
        85.505, 495.913, 264.976,  51.091, 538.037, 390.599, 327.621, 265.921,
        237.139, 164.493, 216.696, 477.996, 232.058, 208.964, 126.546, 439.983,
        432.833, 215.955, 474.696, 176.449, 374.623, 210.35,  540.915, 229.977,
        515.427, 177.679, 170.699, 215.552, 438.293, 225.138, 409.822, 237.151,
        401.644, 410.466, 459.523, 146.449, 350.134, 179.065,  81.753, 162.877,
        543.771, 519.539, 220.338, 514.099, 508.669, 217.469, 159.588, 520.201,
        418.462, 103.186, 408.864, 385.765, 139.788, 522.187, 145.585, 116.025,
        446.595, 243.739, 243.398, 472.897, 138.148, 332.196, 493.435, 182.334,
        141.363, 189.751, 393.007, 527.328, 210.533, 512.174, 474.183, 352.18,
        35.928, 531.903, 477.151, 415.353, 413.249, 382.601, 264.345, 507.679,
        561.144, 502.214, 460.969, 511.391, 201.489, 402.498,  94.367, 491.965,
        204.891, 378.99,  511.553, 472.318, 499.917, 235.868, 136.736, 387.277,
        556.693, 392.413, 417.946, 548.432, 436.707, 542.482, 204.04,  210.752,
        288.323, 484.249, 366.067, 414.008, 532.568, 527.492, 405.851, 102.451,
        112.47,  479.359, 276.121, 482.552, 401.17,  140.87,  348.355, 363.498,
        95.27,  472.826, 325.266, 527.538,  70.747, 530.604, 232.237, 522.081,
        476.22,  238.962, 431.052, 558.299, 401.476, 240.954, 521.752, 245.276,
        457.97,  190.72,  450.128, 430.219, 363.43,  255.213, 458.748, 357.251,
        404.637, 358.1,   63.396, 344.221, 403.15,  359.988, 424.509, 363.701,
        227.315, 448.862, 530.995, 355.358, 432.599, 291.147, 253.928, 283.373,
        397.735, 360.308, 475.694, 462.309};
        x2[2]= new double[]{1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.};
        
        return new SimpleMatrix(x2);
    }
   
    public static PairFloatArray readMerton1UnnormalizedXY1Data() {
        
        SimpleMatrix m1 = readMerton1UnnormalizedX1Data();
        
        PairFloatArray xy = new PairFloatArray(m1.numCols());
        for (int i = 0; i < m1.numCols(); i++) {
            xy.add((float)m1.get(0, i), (float)m1.get(1, i));
        }
        
        return xy;
    }
    
    /**
     * dataset from 'Merton College I" at
     * http://www.robots.ox.ac.uk/~vgg/data/data-mview.html
     * 
     * @return 
     */
    public static PairFloatArray readMerton1UnnormalizedXY2Data() {
        
        SimpleMatrix m2 = readMerton1UnnormalizedX2Data();
        
        PairFloatArray xy = new PairFloatArray(m2.numCols());
        for (int i = 0; i < m2.numCols(); i++) {
            xy.add((float)m2.get(0, i), (float)m2.get(1, i));
        }
        
        return xy;
    }
    
    public static void readBrownAndLoweMatches(PairIntArray imageCorners1XY,
        PairIntArray imageCorners2XY) throws IOException {
        
        PairFloatArray set1 = new PairFloatArray();
        PairFloatArray set2 = new PairFloatArray();
        readBrownAndLoweMatches(set1, set2);
        
        for (int i = 0; i < set1.getN(); i++) {
            
            imageCorners1XY.add(Math.round(set1.getX(i)), 
                Math.round(set1.getY(i)));
            
            imageCorners2XY.add(Math.round(set2.getX(i)), 
                Math.round(set2.getY(i)));
        }
    }
    
    public static void readBrownAndLoweMatches(PairFloatArray imageCorners1XY,
        PairFloatArray imageCorners2XY) throws IOException {
        
        String fileName1 = "brown_lowe_2003_matching.tsv";
        String filePath1 = ResourceFinder.findFileInTestResources(fileName1);
        
        BufferedReader br = null;
        FileReader reader = null;
        try {
            reader = new FileReader(new File(filePath1));
            br = new BufferedReader(reader);
            String line = br.readLine();
            line = br.readLine();
            while (line != null) {
                String[] items = line.split("\\s+");
                if ((items != null) && (items.length == 4)) {
                    Integer x1 = Integer.valueOf(items[0]);
                    Integer y1 = Integer.valueOf(items[1]);
                    Integer x2 = Integer.valueOf(items[2]);
                    Integer y2 = Integer.valueOf(items[3]);
                    imageCorners1XY.add(x1.intValue(), y1.intValue());
                    imageCorners2XY.add(x2.intValue(), y2.intValue());
//System.out.println(x1 + ", " + y1 + "  " + x2 + ", " + y2);
                }
                line = br.readLine();
            }
        } finally {
            if (reader != null) {
                reader.close();
            }
            if (br != null) {
                br.close();
            }
        }
    }

    public static void readBrownAndLoweCorners(PairIntArray imageCorners1XY,
        PairIntArray imageCorners2XY) throws IOException {
                
        BufferedReader br = null;
        FileReader reader = null;
        
         String[] fileNames = new String[]{"brown_lowe_2003_image1.tsv", 
            "brown_lowe_2003_image2.tsv"};
        
        for (String fileName : fileNames) {
            
            String filePath1 = ResourceFinder.findFileInTestResources(fileName);
            PairIntArray xy = fileName.equals("brown_lowe_2003_image1.tsv") 
                ? imageCorners1XY : imageCorners2XY;
            
            try {
                reader = new FileReader(new File(filePath1));
                br = new BufferedReader(reader);
                String line = br.readLine();
                while (line != null) {
                    String[] items = line.split("\\s+");
                    if ((items != null) && (items.length == 2)) {
                        Integer x1 = Integer.valueOf(items[0]);
                        Integer y1 = Integer.valueOf(items[1]);
                        xy.add(x1.intValue(), y1.intValue());
                    }
                    line = br.readLine();
                }
            } finally {
                if (reader != null) {
                    reader.close();
                }
                if (br != null) {
                    br.close();
                }
            }
        }
    }
    
    public static void readBrownAndLoweCorners(PairFloatArray imageCorners1XY,
        PairFloatArray imageCorners2XY) throws IOException {
                
        BufferedReader br = null;
        FileReader reader = null;
        
        String[] fileNames = new String[]{"brown_lowe_2003_image1.tsv", 
            "brown_lowe_2003_image2.tsv"};
        
        for (String fileName : fileNames) {
            
            String filePath1 = ResourceFinder.findFileInTestResources(fileName);
            PairFloatArray xy = fileName.equals("brown_lowe_2003_image1.tsv") 
                ? imageCorners1XY : imageCorners2XY;
            
            try {
                reader = new FileReader(new File(filePath1));
                br = new BufferedReader(reader);
                String line = br.readLine();
                while (line != null) {
                    String[] items = line.split("\\s+");
                    if ((items != null) && (items.length == 2)) {
                        Integer x1 = Integer.valueOf(items[0]);
                        Integer y1 = Integer.valueOf(items[1]);
                        xy.add(x1.intValue(), y1.intValue());
                    }
                    line = br.readLine();
                }
            } finally {
                if (reader != null) {
                    reader.close();
                }
                if (br != null) {
                    br.close();
                }
            }
        }
    }

    public static void readMerton1Matched(PairIntArray matched1, 
        PairIntArray matched2) {
        
        PairFloatArray xy1 = readMerton1UnnormalizedXY1Data();
        PairFloatArray xy2 = readMerton1UnnormalizedXY2Data();
        
        for (int i = 0; i <  xy1.getN(); i++) {
            int x = Math.round(xy1.getX(i));
            int y = Math.round(xy1.getY(i));
            matched1.add(x, y);
        }
        
        for (int i = 0; i <  xy1.getN(); i++) {
            int x = Math.round(xy2.getX(i));
            int y = Math.round(xy2.getY(i));
            matched2.add(x, y);
        }
    }
    
    public static void readMerton1Matched(PairFloatArray matched1, 
        PairFloatArray matched2) {
        
        PairFloatArray xy1 = readMerton1UnnormalizedXY1Data();
        PairFloatArray xy2 = readMerton1UnnormalizedXY2Data();
        
        for (int i = 0; i <  xy1.getN(); i++) {
            int x = Math.round(xy1.getX(i));
            int y = Math.round(xy1.getY(i));
            matched1.add(x, y);
        }
        
        for (int i = 0; i <  xy1.getN(); i++) {
            int x = Math.round(xy2.getX(i));
            int y = Math.round(xy2.getY(i));
            matched2.add(x, y);
        }
    }

    public static void readMerton1RandomlyScrambled(PairIntArray matched1, 
        PairIntArray matched2) throws NoSuchAlgorithmException {
        
        readMerton1Matched(matched1, matched2);
        
        int n = matched1.getN();
        
        SecureRandom sr = SecureRandom.getInstance("SHA1PRNG");
        long seed = System.currentTimeMillis();
        sr.setSeed(seed);
        System.out.println("SEED=" + seed);
        
        int nScrambles = 2*n;
        
        for (int i = 0; i < nScrambles; i++) {
            int idx1 = sr.nextInt(n);
            int idx2 = sr.nextInt(n);
            
            int swapX = matched1.getX(idx1);
            int swapY = matched1.getY(idx1);
            matched1.set(idx1, matched1.getX(idx2), matched1.getY(idx2));
            matched1.set(idx2, swapX, swapY);
            
            swapX = matched2.getX(idx1);
            swapY = matched2.getY(idx1);
            matched2.set(idx1, matched2.getX(idx2), matched2.getY(idx2));
            matched2.set(idx2, swapX, swapY);
        }
    }

    static void readUnmatchedMerton1CornersFromThisCode(PairIntArray corners1, 
        PairIntArray corners2) throws IOException, Exception {
        
        String fileName1 = "merton_college_I_001.jpg";
        String fileName2 = "merton_college_I_002.jpg";
        String filePath1 = ResourceFinder.findFileInTestResources(fileName1);
        String filePath2 = ResourceFinder.findFileInTestResources(fileName2);
        ImageExt img1 = ImageIOHelper.readImageExt(filePath1);
        ImageExt img2 = ImageIOHelper.readImageExt(filePath2);
        
        CurvatureScaleSpaceCornerDetector detector = new
            CurvatureScaleSpaceCornerDetector(img1);
        
        detector.useOutdoorMode();
       
        detector.findCorners();
        
        PairIntArray c = detector.getCornersInOriginalReferenceFrame();
        corners1.swapContents(c);
        
        Image image1 = ImageIOHelper.readImageAsGrayScale(filePath1);
        ImageIOHelper.addCurveToImage(corners1, image1, 2, 255, 0, 0);
        ImageIOHelper.addAlternatingColorCurvesToImage(
            detector.getEdgesInOriginalReferenceFrame(), image1);
        
        detector = new
            CurvatureScaleSpaceCornerDetector(img2);
        
        detector.useOutdoorMode();
       
        detector.findCorners();
        
        c = detector.getCornersInOriginalReferenceFrame();
        corners2.swapContents(c);
        
        Image image2 = ImageIOHelper.readImageAsGrayScale(filePath2);
        ImageIOHelper.addCurveToImage(corners2, image2, 2, 255, 0, 0);
        ImageIOHelper.addAlternatingColorCurvesToImage(
            detector.getEdgesInOriginalReferenceFrame(), image2);
        
        ImageDisplayer.displayImage("corners for image 1", image1);
        ImageDisplayer.displayImage("corners for image 2", image2);
    }
    
    public static void writePointsToTestResources(PairIntArray xy, 
        String fileName) throws IOException {
        
        String eol = System.getProperty("line.separator");
        
        String sep = System.getProperty("file.separator");
    
        String dir = ResourceFinder.findTestResourcesDirectory();
        
        String outFilePath = dir + sep + fileName;
        
        FileWriter fw = null;
        BufferedWriter writer = null;
        
        try {
            File file = new File(outFilePath);
            file.delete();
            file.createNewFile();

            fw = new FileWriter(file);
            writer = new BufferedWriter(fw);
                        
            for (int i = 0; i < xy.getN(); i++) {
                
                String line = String.format("%d\t%d", xy.getX(i), xy.getY(i));
                
                writer.write(line);
                
                writer.write(eol);
                
                if ((i % 10) == 0) {
                    writer.flush();
                }
            }

            writer.flush();

        } finally {

            if (writer != null) {
                writer.close();
            }
            if (fw != null) {
                fw.close();
            }
            
            System.out.println(eol + "wrote: " + outFilePath);
        }
    }

    public static void readBrownAndLoweInflectionPointsImage1(PairIntArray output) 
        throws IOException {
        
        String fileName = "brown_lowe_2003_image1_infl_pts.tsv";
        
        read2ColumnTSV(fileName, output);
    }
    
    public static void readBrownAndLoweInflectionPointsImage2(PairIntArray output) 
        throws IOException {
        
        String fileName = "brown_lowe_2003_image2_infl_pts.tsv";
        
        read2ColumnTSV(fileName, output);
    }
    
    private static void read2ColumnTSV(String fileName, PairIntArray output) 
        throws IOException {
        
        String filePath = ResourceFinder.findFileInTestResources(fileName);
        
        BufferedReader br = null;
        FileReader reader = null;
        
        try {
            
            reader = new FileReader(new File(filePath));
            
            br = new BufferedReader(reader);
            
            String line = br.readLine();
            while (line != null) {
                // \\s+ should handle tabs too
                String[] items = line.split("\\s+");
                if ((items != null) && (items.length == 2)) {
                    Integer x1 = Integer.valueOf(items[0]);
                    Integer y1 = Integer.valueOf(items[1]);
                    
                    output.add(x1.intValue(), y1.intValue());
                }
                line = br.readLine();
            }
        } finally {
            if (reader != null) {
                reader.close();
            }
            if (br != null) {
                br.close();
            }
        }
    }
    
    /*
    https://venturi.fbk.eu/results/public-datasets/mountain-dataset/
    
    Image size: 640×480
    Focal length expressed in horizontal pixels: 578.439
    Focal length expressed in vertical pixels: 571.025
    Displacement of the optical center with respect to the central pixel of the image: (Δr,Δc) = (-2.59964,-3.75566)
    Radial distortion parameters: a=-0.0171494, b=0.0643652, c=-0.0594286.
    
    camera details:
    
        Sony Ericsson XPERIA Arc S

    --------------------------------
    Are these the camera sensor details?  http://www.sony.net/SonyInfo/News/Press/201010/10-137E/
    
        the detector is CMOS instead of a CCD:

        F2.4 aperture, 8.5(W)×8.5(D)× 5.67(H)mm,
        Sony’s Exmor™ R 
        IMX105PQ
        number of effective pixels:
           3288(H)×2472(V)
           pixel size is 1.4μm
    
        Lens module:
         IU105F2, 8.5(W)×8.5(D)× 5.67(H)mm, F2.4
         
    F2.4 and 8.5mm x 8.5mm ==> focal distance of 20.4 mm
    (20.4e-3)/(1.4e-6) = 14571 in pixels 
    
    Did they bin their pixels?  
        3288/640 = 5.14, 2472/480 = 5.15
    
    still a factor of 5 off... doesn't look like the sensor information for their data
    
    ------------------------------------------------
    camera calibration matrix:
        | f/s_x  f/s_x*cot(theta)  o_x |
    K = | 0      f/s_y             o_y |
        | 0      0                 1   |

    f is focal distance in mm
    o_x,o_y is the principal point, image center coordinates in pixels
    s_x, s_y are the pixel sizes in the camera in mm
    theta is the angle between the axes and is usually pi/2
    
        | 578.439  578.439*cot(theta)  -2.59964 |
    K = | 0        571.025             -3.75566 |
        | 0        0                   1        |
    
    for extrinsic matrix, apply any rotation and translation of the camera
    to the intrinsic matrix.
    
    C, the calibration matrix, is the intrinsic matrix operated on by
    rotation and or translation of the camera, if any rotation or translation.
    
    P_C is point (u,v,w) in the image plane where P is point (x, y, z) is 3D coordinate
    of an object in real world reference frame.
    
    P_C = K * P
   
    */
    
    public static SimpleMatrix getVenturiCameraIntrinsics() {
        
        SimpleMatrix k = new SimpleMatrix(3, 3);
        
        k.set(0, 0, 578.439);
        k.set(1, 1, 571.025);
        k.set(2, 2, 1);
        k.set(0, 2, -2.59964);
        k.set(0, 2, -3.75566);
        
        return k;
    }
    
    /**
     <pre>
        <id>00000001.jpg</id>
             <extrinsic manual="yes">
             <yaw_0>334.84299</yaw_0>
             <pitch_0>-2.7474477</pitch_0>
             <roll_0>0.24977571</roll_0>
             </extrinsic>
      </pre>
     * @return 
     */
    public static SimpleMatrix getVenturiRotationMatrixForImage001() {
        
        SimpleMatrix rot = MatrixUtil.calculateRotationMatrix(334.84299, -2.7474477, 
            0.24977571);
        
        return rot;
    }
    
    /**
        <id>00000010.jpg</id>
             <extrinsic>
             <yaw_0>335.0196462</yaw_0>
             <pitch_0>-2.677034873</pitch_0>
             <roll_0>-0.00302316582</roll_0>
             </extrinsic>
     * @return 
     */
    public static SimpleMatrix getVenturiRotationMatrixForImage010() {
        
        SimpleMatrix rot = MatrixUtil.calculateRotationMatrix(335.0196462, -2.677034873, 
            -0.00302316582);
        
        return rot;
    }
    
    public static Set<PairInt> getRectangle(int width, int height, int xCenter, 
        int yCenter) {
        
        Set<PairInt> points = new HashSet<PairInt>();
        
        for (int x = (xCenter - (width/2)); x < (xCenter + (width/2)); ++x) {
            for (int y = (yCenter - (height/2)); y < (yCenter + (height/2)); ++y) {
                points.add(new PairInt(x, y));
            }
        }
        
        return points;
    }
}
