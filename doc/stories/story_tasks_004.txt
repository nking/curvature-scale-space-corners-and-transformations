========================================================================
Story: Reduce memory use of Image and GreyscaleImage
 
    summary: caching segmentation images in the scale calculator
      is consuming alot of memory, so need to reduce the space
      complexity.

    time estimate: min 3 days, max 7 days (FTE)

    amount of time used: 

    state of completion: 

    comments regarding state:

    comments:

------------------------------------------------------------------
Task 1:  Refactor Image and GreyscaleImage and associated classes
      
    details:  

      The Image.java and GreyscaleImage.java can easily be changed
      to use 4 times less memory by storing 4 bytes in each
      space in their integer arrays.
      Code accessing the arrays has to be updated to use the
      image methods instead of directly accessing the arrays now
      (for example, MiscMath methods for min and max finding).
      For 64 bit systems, the space that an int occupies on the
      stack is word size, so a long[] should be used and in that
      case the savings is a factor of 8 per image array (= 24 for 
      color image).

    time estimate: min 2 days, max 5 days
  
    amount of time used:
        1.5 days so far

    state of completion: 
        implemented, but still testing

    comments:
              
---------------------------------------------------------------------
Task 2:  For the scale calculator image cache, need the cache to
         persist images to temporary files when memory use becomes
         large and re-read them as needed.
      
    details:  
        Will implement a simple model that needs the following:
           -- Class extensions of the images that holds the file path to
           the persisted file (using java's serialization).
           -- write the serialization read and writes to and from object
              streams for the image classes.
           -- an addition to the use of the caches (which are currently
              java hashmaps) that upon each put,
              will look at memory used and persist contents when 
              approaching that (and replace the contents with the
              persisted image place holder).
           -- an addition to the use of the caches that upon each get,
              will handle reading a persisted file if the image is
              one of the persisted holders.
              the image will be placed back in the cache.

        Note that the images are retained as references in classes 
           such as IntensityFeatures, so that class has to be changed to allow
           the image to be passed as a reference at the method level
           and documentation added to the class to make sure the user knows
           it should only be used on one (same) image...(could later add
           identities to images to make safer use)

           X BlobContoursScaleFinder corrected
           X BlobContoursScaleFinder0 corrected
                 X ClosedCurveContourMatcher0 corrected
           X BlobCornerScaleFinder corrected
                 X ClosedCurveCornerMatcherWrapper
                 X ClosedCurveCornerMatcher
           X BlobCornerScaleFinder0 corrected

        Note too that a less ideal solution not chosen would be to 
           perform all algorithms for matching on a given segmented image
           and then construct new objects which cache images (or clear them).
           This approach does not let the fastest matching algorithms
           operate on all segmentation types first before proceeding to
           the slower matching algorithms as is currently done.
           This alternate solution could still be easily implemented
           later even after the caching changes, but is not the current choice.
           
        Consider exploring google collections.  guava has maps that
          keep track of last time used to help make decisions about 
          which members to release in addition to using java's weak
          and soft references.

    time estimate: min 1 day, max 2 days
  
    amount of time used:

    state of completion: 

    comments:
              
---------------------------------------------------------------------
