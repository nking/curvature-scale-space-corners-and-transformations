-- add a wrapper for the object matcher to handle the image binning
   and pre-processing present in the tests with
   documentation 

-- Neural networks:
   -- optimization:
      http://neuralnetworksanddeeplearning.com/chap3.html
      https://github.com/jaberg/hyperopt
      (Bergstra and Bengio 2012)

   -- alternative to minimize cost function instead of stochastic
      gradient descent is LBFGS.

-- do exercises for Fig 4.11, pg 220 of Bishop 2006
-- http://www.gaussianprocess.org/gpml/code/matlab/doc/
   and tensorflow
     https://github.com/NervanaSystems/neon
     https://en.wikipedia.org/wiki/Theano_(software)
     https://en.wikipedia.org/wiki/Torch_(machine_learning)

-- impl iterative reweighted least squares

-- for the smoothing of the separation curve,
   could retry knn, that is use same pyramidal,
   but without re-sampling AND divide each range
   by h to include volume, making the curve density.
     see bishop 2006, chap 2.5

 (1) reading bishop 2006
    and looking at
    http://www.gaussianprocess.org/gpml/code/matlab/doc/
    and tensorflow
    -- Conditional Random Fields
    -- variational Bayes and expectation propagation

(2) read the remote sensing paper

-- consider making a greyscale MSEREdges

-- when return to improving the segmentation, run MSEREdges on
     the berkeley benchmark data

-- consider implementing a affine transformation class

-- consider implementing a 3-view transformation solver
   ...trifocal tensor

-- interesting:
   solving the transformations between 2 images
   when have most of the camera matrix except focal length.

   http://www.vis.uky.edu/~stewe/publications/stewenius_05_cvpr_focal.pdf

   for Structure in Motion, camera information is needed and 5 points of
      correspondence.
   When camera infor is not available, epipolar geometry w/ 7 points of
      correspondence is used, but is not as stable.

   also see
       P. Sturm, On Focal Length Calibration from Two Views,
       IEEE International Conference on Computer Vision and Pattern
       Recognition, Volume 2, pp. 145â€“150, 2001
 
-- geohashing and bag of words, etc

-- consider implementing Paris and Durand 2007
     -- uses kruskal's mst for merging os is a fast NlogN

-- consider implementing one day, compressed histogram of grdients:
http://web.stanford.edu/~bgirod/pdfs/Chandrasekhar_CVPR2009.pdf

-- low priority: improve the auxillary methods in the partial shape matchers
    to calculate cost when given correspondence.

-- consider implementing Tarjans latest paper (bipartite matching)

-- consider implementing vanishing lines based upon MSER ellipses

-- consider making a version of normalized cuts that uses the spatial location
    of points too (lkeeping labeled regions contiguous)

-- consider implementing a mean shift algorithm

-- fix the ransac iterator estimate that has a limit of
    (1790?)

-- read more on "Simultaneous Localization and Mapping, or SLAM"
     
-- consider following the implementation of disparity maps for stereo images
   and 3d modelling.  see notes in the docs directory.
   -- see http://vision.middlebury.edu/stereo/code/

-- test for degenerate camera conditions:
   -- parallel camera motion w/o rotation 
-- test for degenerate scene structure configurations
   -- all points lying on a plane or nearly lying on a plane (?)
-- test for point sets containing noise

-- more reading on 3d reconstruction
   and http://www.cs.cornell.edu/~snavely/projects/skeletalset/SkeletalSets_cvpr08.pdf

-- finish the special topics reading
   -- add to it "Mastering the game of Go with 
      deep neural networks and tree search"
      which is reinforcement learning in ML
2  --  https://openproceedings.org/2016/conf/edbt/paper-54.pdf
   -- https://link.springer.com/chapter/10.1007%2F978-3-642-21887-3_28?LI=true
   -- the go game playing paper referenced in quantum_notes.txt, espec. compared
          to gobmk

-- priority is implement when needed:
   considering algorithms to implement:
   0: looking at bayesian optimization
   1: hybrid global search
      considering these
          -- scatter
              https://www.researchgate.net/publication/228011098_The_Scatter_Search_Methodology
          -- tabu
              http://www.iro.umontreal.ca/~dift6751/paper_glover_ts_2.pdf
          -- pso
             https://github.com/CAChemE/stochastic-optimization
   2: Metropolis:
         http://introcs.cs.princeton.edu/java/98simulation/Metropolis.java.html
      http://introcs.cs.princeton.edu/java/98simulation/MarkovChain.java.html
      http://web.engr.illinois.edu/~bkclark/PIMCTutorial/tutorial.pdf
        https://arxiv.org/pdf/quant-ph/9607014.pdf
      -- importance sampling
         http://jrxv.net/x/16/ism.pdf

-- no priority:
   for jni bindings of the c++ dlib library, would like to automate
    the steps of compile, outlined by the MITIE project.
    dependencies (but for automated platform independence):
      -- swig:
         swig is platform specific and depends upon another platform 
           specific library called PCRE (needed to make pearl bindings).
         to automate the installation if needed and then the use of swig
            to compiJle, a possibility is the use of 2 maven2 plugins:
               -- freehep-swig-plugin 
               -- freehep-nar-plugin 
            the swig plugin requires some additional configuration for
            the download and there is only a small amount of documentation 
            on that.
            -- missing is the information that PCRE needs to be downloaded
               also so that would need to be added to the configuration
               if possible.
            A caveat to this is that these numerous steps to a mvn target
              checking for swig and dependencies and installing them with
              nar when needed would have to be tested for all platforms.
      -- nar:
            writing the nar commands to use swig and cmake would have to
            include the platform specific details present in the
            MITIE README.md file, espec for windows.
            this builds archive files so would be an offline step to
            provide os specific dependencies (which can do if convert 
            project to maven build system)
     cannot easily test on all platforms at this time, so will leave this
     as a todo target for the interesting details, but essentially no
G
     expected priority.
