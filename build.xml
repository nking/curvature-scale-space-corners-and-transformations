<?xml version="1.0"?>
<!-- ======================================================================
  Builds the two-point correlation algorithm

  The default target is listTargets

  The directory structure of the application is:

    src                Java source code (and associated resource files)
                       and junit test files.

    lib                any 3rd party libraries needed by application

    bin/classes        compiled code

    src/main/resources resource files, including persisted for use in future runs

    docs               Javadocs for developers

    src/test           unit tests small enough to run with every build

    src/test-large     unit tests with long run times

    bin      compiled classes, code coverage results, and static analysis results
 ====================================================================== -->
<project xmlns:jacoco="antlib:org.jacoco.ant" name="twoPointCorrelation" default="listTargets" basedir=".">

    <!-- ================= set env properties ================= -->
    <property environment="env"/>

    <!-- assignment name to be used in archive -->
    <property name="app.name"            value="${ant.project.name}"/>

    <!-- =========== the application file directories ========-->
    <property name="src.dir"             value="${basedir}/src/main/java"/>
    <property name="lib.dir"             value="${basedir}/lib"/>
    <property name="classes.dir"         value="${basedir}/bin"/>
    <property name="resources.dir"       value="${basedir}/src/main/resources"/>
    <property name="src.out.dir"         value="${classes.dir}/classes"/>
    <property name="doc.dir"             value="${basedir}/docs"/>
    <property name="tests.dir"           value="${basedir}/src/test/java"/>
    <property name="aspects.dir"         value="${basedir}/src/test/aspects"/>
    <property name="tests.out.dir"       value="${classes.dir}/test-classes"/>
    <property name="instr.out.dir"       value="${classes.dir}/instr-classes" />
    <property name="log.dir"             value="${basedir}/log"/>
    <property name="logfile"             value="${log.dir}/build.log"/>
    <property name="tests.large.dir"     value="${basedir}/src/test-large/java"/>
    <property name="tests.large.out.dir" value="${classes.dir}/test-large-classes"/>

    <!-- set compiler options -->
    <!--<property name="compile.debug"   value="false"/>-->
    <property name="compile.deprecation" value="true"/>
    <property name="compile.optimize"    value="false"/>
    <property name="compile.target"      value="1.6"/>

    <!-- print usage: prints all targets -->
    <target name="listTargets"
        description="prints all targets in this any file">
        <echo message="listTargets:                prints all targets in this ant file"/>
        <echo message="prepare:                    prepare directories"/>
        <echo message="clean:                      deletes old classes, logs, build, and javadocs"/>
        <echo message="compile:                    compile source files"/>
        <echo message="compileTests:               compile test files"/>
        <echo message="compileLargeTests:          compile large test files"/>
        <echo message="runTests:                   run tests"/>
        <echo message="runTestsWithAspects:        run tests that have aspects"/>
        <echo message="runLargeTests:              run tests in tests_large"/>
        <echo message="runTest:                    run test with -Dtest=fqn of test"/>
        <echo message="runLargeTest:               run large test with -Dtest=fqn of test"/>
        <echo message="debugTests:                 run tests and use jdwp"/>
        <echo message="debugTest:                  debug test with -Dtest= fqn of test and jdwp"/>
        <echo message="debugLargeTest:             debug test with -Dtest= fqn of test and jdwp"/>
        <echo message="javadoc:                    create javadocs"/>
        <echo message="runCoverage                 create code coverage reports"/>
        <echo message="runCoverage2                create code coverage reports only for the com.climbwithyourfeet package"/>
        <echo message="package                     build jar"/>
        <echo message="package2                    build jar with clustering based on distance transform"/>
    </target>
    
    <property name="jacoco.exec.dir" location="bin/jacoco"/>

    <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
        <classpath path="${env.JACOCO_HOME}/lib/jacocoant.jar"/>
    </taskdef>

    <condition property="extra.src.dir" value="${extra.src}" else="${basedir}/src/placeholder">
        <isset property="extra.src" />
    </condition>

    <condition property="jar.mf" value="${package.mf}" else="${resources.dir}/two-point-correlation.mf">
        <isset property="package.mf" />
    </condition>
    
    <condition property="jar2.mf" value="${package2.mf}" else="${resources.dir}/clustering_dist_trans.mf">
        <isset property="package2.mf" />
    </condition>

    <!-- set compile classpath  -->
    <path id="compile.classpath">
        <pathelement location="${src.out.dir}"/>
        <fileset dir="${lib.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <!-- set test classpath  -->
    <path id="test.classpath">
        <pathelement location="${tests.dir}" />
        <path refid="compile.classpath"/>
    </path>
    <path id="test.large.classpath">
        <pathelement location="${tests.large.dir}" />
        <path refid="compile.classpath"/>
    </path>
    <path id="aspect.classpath">
        <pathelement location="${lib.dir}/aspectjrt-1.8.0.jar"/>
        <pathelement location="${lib.dir}/aspectjweaver-1.8.0.jar"/>
        <pathelement location="${aspects.dir}/META-INF/"/>
    </path>

    <target name="debug" description="sets compile.debug to true" >
        <property name="compile.debug" value="true" />
    </target>

    <!-- =========== clean  ========== -->
    <target name="clean"
        description="Delete dirs: build, doc/api, and src tree classes">
        <delete failonerror="false">
            <fileset dir="${classes.dir}" />
            <fileset dir="${aspects.dir}" includes="**/*.class" excludes="*.jar" />
        </delete>
        <delete failonerror="false">
            <fileset dir="${log.dir}" includes="*" />
        </delete>
    </target>

    <!-- prepare is called by compile -->
    <target name="prepare" description="create directories">
        <mkdir  dir="${classes.dir}"/>
        <mkdir  dir="${src.out.dir}"/>
        <mkdir  dir="${tests.out.dir}"/>
        <mkdir  dir="${tests.large.out.dir}"/>
        <mkdir  dir="${instr.out.dir}"/>
        <mkdir  dir="${log.dir}"/>
        <mkdir  dir="${basedir}/tmpdata"/>
        <mkdir  dir="${basedir}/src/placeholder"/>
    </target>

    <!-- compile sources -->
    <target name="compile" depends="prepare" description="Compile Java classes">
        <record name="${logfile}" append="yes" loglevel="info"/>

        <!--
        <property name="printclasspath" refid="compile.classpath"/>
        <echo message="classpath=${printclasspath}" />
        -->

        <javac srcdir="${src.dir}"
            destdir="${src.out.dir}"
            source="${compile.target}"
            debug="${compile.debug}"
            deprecation="${compile.deprecation}"
            includeAntRuntime="false"
            optimize="${compile.optimize}">
            <src path="${src.dir}"/>
            <src path="${extra.src.dir}"/>
            <classpath refid="compile.classpath"/>
            <include name="**/*.java"/>
            <exclude name="**/*Test*.java"/>
        </javac>

        <copy file="${resources.dir}/logging.properties" todir="${src.out.dir}" />
        <copy file="${resources.dir}/plot_minima_stats.html" todir="${src.out.dir}" />
        <copy file="${resources.dir}/plot_points_and_polygon.html" todir="${src.out.dir}" />
        <copy file="${resources.dir}/plot_twoptcorrelation.html" todir="${src.out.dir}" />

    </target>

    <!-- compile tests  -->
    <target name="compileTests" depends="clean,debug,compile" description="Compile Java tests" >
        <record name="${logfile}" append="yes" loglevel="info"/>

    	<javac srcdir="${tests.dir}"
    	    destdir="${tests.out.dir}"
    	    source="${compile.target}"
            debug="true"
            includes="**/*Test.java"
            includeAntRuntime="false"
    	    deprecation="${compile.deprecation}"
    	    optimize="${compile.optimize}" >
    	    <classpath refid="test.classpath"/>
            <src path="${tests.dir}"/>
            <src path="${src.dir}"/>
            <compilerarg value="-Xlint"/>
    	</javac>
    </target>
    <target name="compileLargeTests" depends="clean, debug, compile" description="Compile Java tests" >
        <record name="${logfile}" append="yes" loglevel="info"/>

    	<javac srcdir="${tests.large.dir}"
    	    destdir="${tests.large.out.dir}"
    	    source="${compile.target}"
            debug="on"
            includes="**/*Test.java"
            includeAntRuntime="false"
    	    deprecation="${compile.deprecation}"
    	    optimize="${compile.optimize}" >
    	    <classpath refid="test.classpath"/>
            <src path="${tests.large.dir}"/>
            <src path="${src.dir}"/>
            <compilerarg value="-Xlint"/>
    	</javac>
    </target>

    <!-- javadoc -->
    <target name="javadoc" depends="compile"
        description="Create Javadoc API documentation">
        <record name="${logfile}" append="yes" loglevel="info"/>
        <delete dir="${doc.dir}/api"/>
        <mkdir dir="${doc.dir}/api"/>
        <javadoc
            sourcepath="${src.dir}"
            destdir="${doc.dir}/api"
            package="true"
            packagenames="algorithms.*,com.climbwithyourfeet.*" >
            <classpath refid="compile.classpath"/>
        </javadoc>
    </target>

    <!-- prepare,clean,debug,compile,JUnit,compileTests -->
    <target name="runTests" if="junit.present" depends="clean,debug,compileTests,JUnit">
        <record name="${logfile}" append="yes" loglevel="debug"/>
        <echo message="running tests.  also see tests_large target in runLargeTests" />
        <junit fork="yes" showoutput="false" filtertrace="off" printsummary="yes" haltonerror="true" haltonfailure="true">
            
            <assertions enablesystemassertions="true">
                <enable/>
            </assertions>
            
            <classpath>
                <pathelement location="${tests.out.dir}"/>
                <path refid="test.classpath"/>
            </classpath>
            <formatter type="plain" usefile="true"/>
            <sysproperty key="java.util.logging.config.file" value="${src.out.dir}/logging.properties"/>
            <jvmarg value="-XX:-UseSplitVerifier" />
            <batchtest fork="yes" todir="${tests.out.dir}">
                <fileset dir="${tests.out.dir}">
                    <include name="**/*Test*.class"/>
                    <exclude name= "**/*$*.class"/>
                </fileset>
            </batchtest>
        </junit>
        <antcall target="runTestsWithAspects" />
    </target>

    <target name="compileTestAspects" description="Compile aspects for tests" depends="compile">

        <record name="${logfile}" append="yes" loglevel="debug"/>

        <taskdef resource="org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties"
            classpath="${lib.dir}/aspectjtools-1.8.0.jar" />

        <!-- compile aspect .aj files -->
        <fileset id="ajFileSet" dir="${aspects.dir}" includes="**/*.aj"/>
        <pathconvert pathsep="${line.separator}" property="ajFiles" refid="ajFileSet"/>
        <echo file="${aspects.dir}/aj-files.txt" >${ajFiles}</echo>

        <path id="weave.path">
            <pathelement path="${src.out.dir}"/>
        </path>

        <!--
        compile aspects alone to classes binary directory
        -->
        <iajc source="1.6" destDir="${src.out.dir}"  verbose="false" >
            <argfiles>
                <pathelement location="${aspects.dir}/aj-files.txt"/>
            </argfiles>
            <inpath>
                <path refid="weave.path"/>
            </inpath>
            <classpath>
                <pathelement location="${lib.dir}/aspectjrt-1.8.0.jar"/>
            </classpath>
        </iajc>

    </target>

    <!-- prepare,clean,debug,compile,JUnit,compileTests -->
    <target name="runTest" if="junit.present" depends="prepare,debug,compile,JUnit,compileTests">
        <record name="${logfile}" append="yes" loglevel="debug"/>
        <fail unless="test">
            Requires -Dtest=class
                Example: 
                    -Dtest=algorithms.compression.huffman.HuffmanTest
            Note that to set jvm properties, set the shell variable JAVA_OPTS.
                Example:
                    export JAVA_OPTS=-Xms1024m
        </fail>
        <copy file="${resources.dir}/logging.properties" todir="${src.out.dir}" />
        <junit fork="yes" showoutput="false" filtertrace="off" printsummary="yes" haltonerror="true" haltonfailure="true">
            <classpath>
                <pathelement location="${tests.out.dir}"/>
                <path refid="test.classpath"/>
            </classpath>
            <formatter type="plain" usefile="true"/>
            <jvmarg value="-XX:-UseSplitVerifier" />
            <jvmarg value="-enableassertions" />
            <sysproperty key="java.util.logging.config.file" value="${src.out.dir}/logging.properties"/>
            <test name="${test}" fork="yes" haltonfailure="yes">
                <formatter type="plain" usefile="false"/>
            </test>
        </junit>
    </target>

    <target name="runTestsWithAspects" if="junit.present" depends="runAspectTest1">
        <record name="${logfile}" append="yes" loglevel="debug"/>
        <echo message="ran tests that have aspects" />
    </target>

    <target name="runAspectTest1" if="junit.present" depends="compileTestAspects,compileTests,JUnit">
        <record name="${logfile}" append="yes" loglevel="debug"/>

        <condition property="aspect.exists">
            <available file="${src.out.dir}/algorithms/compGeometry/clustering/twopointcorrelation/TwoPointVoidStatsAspect.class" type="file"/>
        </condition>
        <echo message="${aspect.exists}" />
        <fail unless="aspect.exists">
            did not find compiled TwoPointVoidStatsAspect
        </fail>

        <junit fork="yes" showoutput="false" filtertrace="off" printsummary="yes" haltonerror="true" haltonfailure="true">
            <jvmarg line="-javaagent:${lib.dir}/aspectjweaver-1.8.0.jar"/>
            <classpath>
                <pathelement location="${tests.out.dir}"/>
                <path refid="aspect.classpath"/>
                <path refid="test.classpath"/>
                <pathelement location="${src.out.dir}"/>
            </classpath>
            <formatter type="plain" usefile="true"/>
            <jvmarg value="-XX:-UseSplitVerifier" />
            <sysproperty key="java.util.logging.config.file" value="${src.out.dir}/logging.properties"/>
            <test name="algorithms.compGeometry.clustering.twopointcorrelation.TwoPointVoidStats3Test" fork="yes" haltonfailure="yes">
                <formatter type="plain" usefile="false"/>
            </test>
        </junit>
    </target>

    <target name="runLargeTests" if="junit.present" depends="clean,debug,compileLargeTests,JUnit">
        <record name="${logfile}" append="yes" loglevel="debug"/>
        <echo message="running tests, output is in ${tests.large.out.dir}" />
        <junit fork="no" showoutput="true" filtertrace="off" printsummary="yes" haltonerror="true" haltonfailure="true">
            <classpath>
                <pathelement location="${tests.large.out.dir}"/>
                <path refid="test.large.classpath"/>
                <pathelement location="${src.out.dir}"/>
            </classpath>
            <formatter type="plain" usefile="true"/>
            <jvmarg value="-XX:-UseSplitVerifier" />
            <sysproperty key="java.util.logging.config.file" value="${src.out.dir}/logging.properties"/>
            <batchtest fork="yes" todir="${tests.large.out.dir}">
                <fileset dir="${tests.large.out.dir}">
                    <include name="**/*Test*.class"/>
                	<exclude name= "**/*$*.class"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="runLargeTest" if="junit.present" depends="prepare,debug,compile,JUnit,compileLargeTests">
        <record name="${logfile}" append="yes" loglevel="debug"/>
        <fail unless="test">
            Set class to test.  example: -Dtest=algorithms.compression.huffman.HuffmanTest
        </fail>
        <junit fork="yes" showoutput="false" filtertrace="off" printsummary="yes" haltonerror="true" haltonfailure="true">
            <!--<jvmarg value="-ea"/>-->
            <formatter type="plain" usefile="true"/>
            <jvmarg value="-XX:-UseSplitVerifier" />
            <sysproperty key="java.util.logging.config.file" value="${basedir}/src/main/resources/logging.properties"/>
            <classpath>
                <pathelement location="${tests.large.out.dir}"/>
                <path refid="test.large.classpath"/>
                <pathelement location="${src.out.dir}"/>
            </classpath>
            <test name="${test}" fork="yes" haltonfailure="yes">
                <formatter type="plain" usefile="false"/>
            </test>
        </junit>
    </target>

    <target name="debugTests" if="junit.present" depends="clean,debug,compileTests,JUnit">
        <record name="${logfile}" append="yes" loglevel="debug"/>
        <echo message="connect to port 5005, running tests, output is in ${tests.out.dir}" />
        <junit fork="yes" showoutput="false" filtertrace="off" printsummary="yes" haltonerror="true" haltonfailure="true">
            <jvmarg line="-Xdebug -Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=y"/>
            <classpath>
                <pathelement location="${tests.out.dir}"/>
                <path refid="test.classpath"/>
                <pathelement location="${src.out.dir}"/>
            </classpath>
            <formatter type="plain" usefile="true"/>
            <jvmarg value="-XX:-UseSplitVerifier" />
            <sysproperty key="java.util.logging.config.file" value="${src.out.dir}/logging.properties"/>
            <batchtest fork="yes" todir="${tests.out.dir}">
                <fileset dir="${tests.out.dir}">
                    <include name="**/*Test*.class"/>
                	<exclude name= "**/*$*.class"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="debugTest" if="junit.present" depends="clean,prepare,debug,compile,JUnit,compileTests">
        <record name="${logfile}" append="yes" loglevel="info"/>
        <fail unless="test">
            Set class to test.  example: -Dtest=algorithms.compression.huffman.HuffmanTest
        </fail>
        <junit fork="yes" showoutput="true" filtertrace="off">
            
            <!--<jvmarg value="-ea"/>-->
            <assertions enablesystemassertions="true">
                <enable/>
            </assertions>

            <jvmarg line="-enableassertions -Xdebug -Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=y -XX:-UseSplitVerifier"/>

            <sysproperty key="java.util.logging.config.file" value="${src.out.dir}/logging.properties"/>
            
            <classpath>
                <pathelement location="${tests.out.dir}"/>
                <path refid="test.classpath"/>
            </classpath>
            <test name="${test}" fork="yes" haltonfailure="yes">
                <formatter type="plain" usefile="false"/>
            </test>
        </junit>
    </target>

    <target name="debugLargeTest" if="junit.present" depends="clean,prepare,debug,compile,JUnit,compileLargeTests">
        <record name="${logfile}" append="yes" loglevel="info"/>
        <fail unless="test">
            Set class to test.  example: -Dtest=algorithms.compression.huffman.HuffmanTest
        </fail>
        <junit fork="yes" showoutput="true" filtertrace="off">
            
            <!--<jvmarg value="-ea"/>-->
            <assertions enablesystemassertions="true">
                <enable/>
            </assertions>

            <jvmarg line="-enableassertions -Xdebug -Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=y -XX:-UseSplitVerifier"/>

            <sysproperty key="java.util.logging.config.file" value="${src.out.dir}/logging.properties"/>
            
            <classpath>
                <pathelement location="${tests.large.out.dir}"/>
                <path refid="test.large.classpath"/>
            </classpath>
            <test name="${test}" fork="yes" haltonfailure="yes">
                <formatter type="plain" usefile="false"/>
            </test>
        </junit>
    </target>

    <!-- set junit.present property -->
    <target name="JUnit">
        <available property="junit.present" classname="junit.framework.TestCase" >
            <classpath refid="test.classpath"/>
        </available>
    </target>

    <target name="package" depends="compile">
        <record name="${logfile}" append="yes" loglevel="debug"/>
        <echo message="making jar file of class files, output is in ${classes.dir}/two-point-correlation.jar" />
        <tstamp>
            <format property="TS" pattern="yyyy-MM-dd" locale="en,US"/>
        </tstamp>
        <jar destfile="${classes.dir}/two-point-correlation_${TS}.jar" manifest="${jar.mf}">
            <fileset dir="${src.out.dir}" includes="**"/>
            <fileset dir="${resources.dir}" includes="*.html"/>
            <fileset dir="${basedir}" includes="LICENSE.txt"/>
            <fileset dir="${basedir}" includes="README.txt"/>
        </jar>
        <mkdir dir="dist" />
        <copy file="${classes.dir}/two-point-correlation_${TS}.jar" tofile="dist/two-point-correlation.jar" />
    </target>
    
    <target name="package2" depends="compile">
        <record name="${logfile}" append="yes" loglevel="debug"/>
        <echo message="making jar file of class files, output is in ${classes.dir}/com.climbwithyourfeet.clustering.jar" />
        <tstamp>
            <format property="TS" pattern="yyyy-MM-dd" locale="en,US"/>
        </tstamp>
        <jar destfile="${classes.dir}/com.climbwithyourfeet.clustering_${TS}.jar" manifest="${jar2.mf}">
            <fileset dir="${src.out.dir}" includes="com/climbwithyourfeet/clustering/**"/>
            <fileset dir="${basedir}" includes="LICENSE.txt"/>
            <fileset dir="${basedir}" includes="README2.txt"/>
        </jar>
        <mkdir dir="dist" />
        <copy file="${classes.dir}/com.climbwithyourfeet.clustering_${TS}.jar" 
              tofile="dist/com.climbwithyourfeet.clustering.jar" />
    </target>
    
    <target name="coverage">
        <record name="${logfile}" append="yes" loglevel="info"/>
        <echo message="coverage"/>
        <jacoco:coverage enabled="true" classdumpdir="bin/instr-classes"
            destfile="${classes.dir}/merged.exec">
            <junit fork="true" forkmode="once" printsummary="yes" haltonerror="true" haltonfailure="true">
                <formatter type="plain" usefile="true"/>
                <sysproperty key="java.util.logging.config.file"
                    value="${src.out.dir}/logging.properties"/>
                <batchtest todir="${tests.out.dir}">
                    <fileset dir="${tests.out.dir}">
                        <exclude name="**/*$*.class" />
                        <include name="**/*Test.class" />
                    </fileset>
                </batchtest>
                <classpath>
                    <pathelement location="${tests.out.dir}"/>
                    <path refid="compile.classpath"/>
                </classpath>
            </junit>
        </jacoco:coverage>
    </target>
    
    <target name="report">
        <jacoco:report>
            <executiondata>
                <file file="${classes.dir}/merged.exec"/>
            </executiondata>
            <structure name="Jacoco Report">
                <classfiles>
                    <fileset dir="${src.out.dir}">
                        <include name="**/*.class" />
                        <exclude name="**/*$*.class" />
                    </fileset>
                </classfiles>
                <sourcefiles encoding="UTF-8">
                    <fileset dir="${src.dir}"/>
                </sourcefiles>
            </structure>
            <html destdir="${classes.dir}/jacoco"/>
        </jacoco:report>
        <echo message="wrote reports to ${classes.dir}/jacoco" />
    </target>

    <target name="runCoverage" depends="clean,debug,compile,compileTests,coverage,report"/>
    
</project>
