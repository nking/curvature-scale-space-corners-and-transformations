<?xml version="1.0"?>
<!-- ======================================================================
  Builds algorithms

  The default target is listTargets

  The directory structure of the application is:

    src                        Java source code (and associated resource files)
                               and junit test files.

    lib                        any 3rd party libraries needed by application

    bin/classes                compiled code

    tmpdata                    tmp data files

    resources, testresources   resource files, including persisted for use in future runs

    doc                        Javadocs for developers

    tests                      unit tests 

    bin                        compiled classes, code coverage results, and static analysis results

 ====================================================================== -->
<project xmlns:jacoco="antlib:org.jacoco.ant" name="curvature-scale-space-corners-and-transformations" default="listTargets" basedir=".">

    <!-- ================= set env properties ================= -->
    <property environment="env"/>

    <!-- assignment name to be used in archive -->
    <property name="app.name"            value="${ant.project.name}"/>

    <!-- =========== the application file directories ========-->
    <property name="src.dir"             value="${basedir}/src"/>
    <property name="resources.dir"       value="${basedir}/resources"/>
    <property name="aspects.dir"         value="${basedir}/aspects"/>
    <property name="lib.dir"             value="${basedir}/lib"/>
    <property name="classes.dir"         value="${basedir}/bin"/>
    <property name="src.out.dir"         value="${classes.dir}/classes"/>
    <property name="doc.dir"             value="${basedir}/doc"/>
    <property name="tests.dir"           value="${basedir}/tests"/>
    <property name="tests.out.dir"       value="${classes.dir}/test-classes"/>
    <property name="instr.out.dir"       value="${classes.dir}/instr-classes" />
    <property name="log.dir"             value="${basedir}/log"/>
    <property name="logfile"             value="${log.dir}/build.log"/>

    <!-- set compiler options -->
    <!--<property name="compile.debug"       value="true"/>-->
    <property name="compile.deprecation" value="true"/>
    <property name="compile.optimize"    value="false"/>
    <property name="compile.target"      value="1.7"/>

    <!-- build all targets -->
    <!--<target name="all" depends="prepare,clean,compile,compileTests,runTests" />
    -->

    <!-- print usage: prints all targets -->
    <target name="listTargets" description="prints all targets in this any file">
        <echo message="listTargets:                prints all targets in this ant file"/>
        <echo message="all:                        clean+compile+ear"/>
        <echo message="prepare:                    prepare directories"/>
        <echo message="clean:                      deletes old classes, logs, build, and javadocs"/>
        <echo message="compile:                    compile source files"/>
        <echo message="compileTests:               compile test files"/>
        <echo message="runTests:                   run tests"/>
        <echo message="runTest:                    run test with -Dtest=fqn of test"/>
        <echo message="debugTest:                  debug test with -Dtest= fqn of test and jdwp"/>
    	<echo message="runCoverage:                run code coverage tools (requires env.JACOCO_HOME)"/>
        <echo message="runDependency               run dependency analysis on packages (requires graphviz and jdepend)"/>
        <echo message="runClassDependency          run dependency analysis on a class(requires jdk8)"/>
        <echo message="javadoc:                    create javadocs"/>
        <echo message="runTestsWithAspects:        run tests with aspects"/>
        <echo message="runTestWithAspects:         run test with aspects, use -Dtest=fqn"/>
        <echo message="debugTestWithAspects:       debug a test with aspects"/>
        <echo message="runThresh                   run code to create thresholded image to help make skyline test comparison images"/>
        <echo message="package                     create a standalone executable in dist/scalespace.jar"/>
    </target>

    <property name="jacoco.exec.dir" location="bin/jacoco"/>

    <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
        <classpath path="${env.JACOCO_HOME}/lib/jacocoant.jar"/>
    </taskdef>

    <!-- set compile classpath  -->
    <path id="compile.classpath">
        <pathelement location="${src.out.dir}"/>
        <fileset dir="${lib.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <!-- set test classpath  -->
    <path id="test.classpath">
        <pathelement location="${tests.dir}" />
        <path refid="compile.classpath"/>
    </path>
    
    <target name="debug" description="sets compile.debug to true" >
        <property name="compile.debug" value="true" />
    </target>

    <!-- =========== clean  ========== -->
    <target name="clean"
        description="Delete dirs: build, doc/api, and src tree classes">
        <delete dir="${doc.dir}/api"/>
        <delete>
            <fileset dir="${classes.dir}" />
            <fileset dir="${aspects.dir}"
                includes="**/*.class"
                excludes="*.jar" />
        </delete>
        <delete>
            <fileset dir="${log.dir}" includes="*" />
        </delete>
    </target>

    <!-- prepare is called by compile -->
    <target name="prepare" description="create directories">
        <mkdir  dir="${classes.dir}"/>
        <mkdir  dir="${src.out.dir}"/>
        <mkdir  dir="${tests.out.dir}"/>
        <mkdir  dir="${instr.out.dir}"/>
        <mkdir  dir="${log.dir}"/>
        <mkdir  dir="tmpdata"/>
    </target>

    <!-- compile sources -->
    <target name="compile" depends="prepare" description="Compile Java classes">
        <record name="${logfile}" append="yes" loglevel="info"/>
        <echo message="COMPILE debug=${compile.debug} optimize=${compile.optimize}"/>
        <javac srcdir="${src.dir}" fork="true"
            destdir="${src.out.dir}"
            source="${compile.target}"
            debug="${compile.debug}"
            deprecation="${compile.deprecation}"
            includeAntRuntime="false"
            memoryInitialSize="1024m"
            memoryMaximumSize="2048m"
            optimize="${compile.optimize}" >
            <classpath refid="compile.classpath"/>
            <include name="**/*.java"/>
            <exclude name="**/*Test*.java"/>
        </javac>
        <copy file="${resources.dir}/logging.properties" todir="${src.out.dir}" />
    </target>

    <!-- compile tests  -->
    <target name="compileTests" depends="clean,debug,compile" description="Compile Java tests" >

        <record name="${logfile}" append="yes" loglevel="info"/>
        
        <echo message="COMPILE TESTS debug=true"/>

    	<javac srcdir="${tests.dir}"
    	    destdir="${tests.out.dir}"
    	    source="${compile.target}"
            debug="true"
            includes="**/*.java"
            excludes="**/*KDTree2Test*java"
            includeAntRuntime="false"
    	    deprecation="${compile.deprecation}"
    	    optimize="${compile.optimize}" >
    	    <classpath refid="test.classpath"/>
            <src path="${tests.dir}"/>
            <src path="${src.dir}"/>
            <compilerarg value="-Xlint"/>
    	</javac>
    </target>

    <target name="coverage">
        <record name="${logfile}" append="yes" loglevel="debug"/>
        <echo message="coverage"/>
        <jacoco:coverage enabled="true" classdumpdir="${classes.dir}/instr-classes"
            destfile="${classes.dir}/merged.exec">
            <junit fork="true" forkmode="once" showoutput="true" printsummary="yes" haltonerror="false" haltonfailure="false">
                <formatter type="plain" usefile="true"/>
                <sysproperty key="java.util.logging.config.file"
                    value="${src.out.dir}/logging.properties"/>
                <batchtest todir="${tests.out.dir}">
                    <fileset dir="${tests.out.dir}">
                        <exclude name="**/*$*.class" />
                        <include name="**/*Test.class" />
                    </fileset>
                </batchtest>
                <classpath>
                    <pathelement location="${tests.out.dir}"/>
                    <path refid="compile.classpath"/>
                </classpath>                
            </junit>
        </jacoco:coverage>
    </target>

    <target name="report">
        <jacoco:report>
            <executiondata>
                <file file="${classes.dir}/merged.exec"/>
            </executiondata>
            <structure name="Jacoco Report">
                <classfiles>
                    <fileset dir="${src.out.dir}">
                        <include name="**/*.class" />
                        <exclude name="**/*$*.class" />
                    </fileset>                    
                </classfiles>
                <sourcefiles encoding="UTF-8">
                    <fileset dir="${src.dir}"/>
                </sourcefiles>
            </structure>
            <html destdir="${classes.dir}/jacoco"/>
        </jacoco:report>
        <echo message="wrote reports to ${classes.dir}/jacoco" />
    </target> 

    <target name="runCoverage" depends="clean,debug,compile,compileTests,coverage,report"/>

    <target name="runTestsWithAspects" depends="clean,debug,compile,compileTests"
        description="run image processing tests with debugging output" >
        
        <record name="${logfile}" append="yes" loglevel="info"/>

        <echo message="COMPILE debug=${compile.debug}"/>
        
    	<taskdef resource="org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties"
    	    classpath="${lib.dir}/aspectjtools-1.8.0.jar" />
        
        <!-- compile aspect .aj files -->
        <fileset id="ajFileSet" dir="${aspects.dir}">
            <include name="**/CurvatureAspect.aj"/>
        </fileset>
        
        <pathconvert pathsep="${line.separator}" property="ajFiles" refid="ajFileSet"/>
        <echo file="${aspects.dir}/aj-files_processing_debug.txt" >${ajFiles}</echo>

        <iajc source="1.6" destDir="${src.out.dir}"  verbose="true" >
            <argfiles>
                <pathelement location="${aspects.dir}/aj-files_processing_debug.txt"/>
            </argfiles>
            <inpath>
                <pathelement location="${src.out.dir}"/>
                <pathelement location="${lib.dir}/ejml-0.29.jar"/>
                <pathelement location="${lib.dir}/jfreechart-1.0.19.jar"/>
                <pathelement location="${lib.dir}/jcommon-1.0.23.jar"/>
                <pathelement location="${lib.dir}/com.climbwithyourfeet.clustering.jar"/>
                <!-- jree needs the servlet jar -->
                <pathelement location="${lib.dir}/servlet-api-2.5.jar"/>
            </inpath>
            <classpath>
                <pathelement location="${lib.dir}/aspectjrt-1.8.0.jar"/>
            </classpath>
        </iajc>

        <junit fork="true" showoutput="false" filtertrace="off" printsummary="yes" 
           haltonerror="true" haltonfailure="true">
        	<jvmarg line="-javaagent:${lib.dir}/aspectjweaver-1.8.0.jar"/>
            
            <assertions enablesystemassertions="true">
                <enable/>
            </assertions>
            
            <classpath>
                <pathelement location="${lib.dir}/aspectjrt-1.8.0.jar"/>
                <pathelement location="${lib.dir}/aspectjweaver-1.8.0.jar"/>
                <pathelement location="${basedir}/res/META-INF/"/>
                <pathelement location="${tests.out.dir}"/>
                <path refid="test.classpath"/>
            </classpath>

            <formatter type="plain" usefile="true"/>

            <sysproperty key="java.util.logging.config.file" value="${src.out.dir}/logging.properties"/>

            <jvmarg value="-XX:-UseSplitVerifier" />

            <jvmarg value="-enableassertions" />

            <!-- avoiding classpath clashes with tests in the submodule by
            limiting the tests run here -->
            <batchtest fork="true" todir="${tests.out.dir}">
                <fileset dir="${tests.out.dir}">
                    <include name="**/*CurvatureTest.class"/>
                	<exclude name= "**/*$*.class"/>
                </fileset>
            </batchtest>
        </junit>
    </target>
    
    <target name="runTestWithAspects" depends="clean,debug,compile,compileTests" 
        description="run an image processing test w/ the debug aspects" >
        
        <!-- note, may need to reweave with each run -->
        <fail unless="test">
            Set class to test.  example: -Dtest=algorithms.spatial.indexing.zoomtable.URIPrefixSymbolTableTest
        </fail>

        <record name="${logfile}" append="yes" loglevel="info"/>

        <echo message="COMPILE debug=${compile.debug}"/>
        
        <taskdef resource="org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties"
            classpath="${lib.dir}/aspectjtools-1.8.0.jar" />

        <!-- compile aspect .aj files -->
        <fileset id="ajFileSet" dir="${aspects.dir}">
            <include name="**/CurvatureAspect.aj"/>
        </fileset>
        
        <pathconvert pathsep="${line.separator}" property="ajFiles" refid="ajFileSet"/>
        <echo file="${aspects.dir}/aj-files_processing_debug.txt">${ajFiles}</echo>

    	<!--
    	compile aspects alone to classes binary directory
    	-->
        <iajc source="1.6" destDir="${src.out.dir}"  
            verbose="false" showWeaveInfo="false" debug="false">
            
            <!--
            -XX:-UseSplitVerifier
            -noverify
            -->
            
            <argfiles>
                <pathelement location="${aspects.dir}/aj-files_processing_debug.txt"/>
            </argfiles>
        	<inpath>
      		<pathelement location="${src.out.dir}"/>
                <pathelement location="${lib.dir}/ejml-0.29.jar"/>
                <pathelement location="${lib.dir}/jfreechart-1.0.19.jar"/>
                <pathelement location="${lib.dir}/jcommon-1.0.23.jar"/>
                <pathelement location="${lib.dir}/com.climbwithyourfeet.clustering.jar"/>
                <!-- jree needs the servlet jar -->
                <pathelement location="${lib.dir}/servlet-api-2.5.jar"/>
        	</inpath>
            <classpath>
                <pathelement location="${lib.dir}/aspectjrt-1.8.0.jar"/>
            </classpath>
        </iajc>

        <java classname="${test}" fork="true" failonerror="true">
            <jvmarg value="-enableassertions"/>
            <jvmarg value="-Xms512m"/>
            <jvmarg value="-Xmx1024m"/>
            <jvmarg line="-javaagent:${lib.dir}/aspectjweaver-1.8.0.jar"/>
            <jvmarg value="-XX:-UseSplitVerifier" />
            <jvmarg value="-noverify" />
            <sysproperty key="java.util.logging.config.file" 
                value="${classes.dir}/classes/logging.properties"/>
            <classpath>
                <pathelement location="${lib.dir}/aspectjrt-1.8.0.jar"/>
                <pathelement location="${lib.dir}/aspectjweaver-1.8.0.jar"/>
                <pathelement location="${basedir}/res/META-INF/"/>
                <pathelement location="${tests.out.dir}"/>
                <path refid="test.classpath"/>
            </classpath>
        </java>
    </target>
    
    <target name="debugTestWithAspects" depends="clean,debug,compile,compileTests" 
        description="compile and then use load-time weaving" >
        
        <!-- note, may need to reweave with each run -->
        <fail unless="test">
            Set class to test.  example: -Dtest=algorithms.spatial.indexing.zoomtable.URIPrefixSymbolTableTest
        </fail>

        <record name="${logfile}" append="yes" loglevel="info"/>

        <echo message="COMPILE debug=${compile.debug}"/>
        
        <taskdef resource="org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties"
            classpath="${lib.dir}/aspectjtools-1.8.0.jar" />

        <!-- compile aspect .aj files -->
        <fileset id="ajFileSet" dir="${aspects.dir}">
            <include name="**/CurvatureAspect.aj"/>
        </fileset>
        
        <pathconvert pathsep="${line.separator}" property="ajFiles" refid="ajFileSet"/>
        <echo file="${aspects.dir}/aj-files_processing_debug.txt">${ajFiles}</echo>

    	<!--
    	compile aspects alone to classes binary directory
    	-->
        <iajc source="1.6" destDir="${src.out.dir}"  verbose="false" >
            <argfiles>
                <pathelement location="${aspects.dir}/aj-files_processing_debug.txt"/>
            </argfiles>
            <inpath>
                <pathelement location="${src.out.dir}"/>
                <pathelement location="${lib.dir}/ejml-0.29.jar"/>
                <pathelement location="${lib.dir}/jfreechart-1.0.19.jar"/>
                <pathelement location="${lib.dir}/jcommon-1.0.23.jar"/>
                <pathelement location="${lib.dir}/com.climbwithyourfeet.clustering.jar"/>
                <!-- jree needs the servlet jar -->
                <pathelement location="${lib.dir}/servlet-api-2.5.jar"/>
            </inpath>
            <classpath>
                <pathelement location="${lib.dir}/aspectjrt-1.8.0.jar"/>
            </classpath>
        </iajc>
           
        <java classname="${test}" fork="true" failonerror="true">
            <jvmarg value="-enableassertions"/>
            <jvmarg value="-Xms512m"/>
            <jvmarg value="-Xmx1024m"/>
            <jvmarg line="-Xdebug -Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=y -XX:-UseSplitVerifier"/>
            <jvmarg line="-javaagent:${lib.dir}/aspectjweaver-1.8.0.jar"/>
            <jvmarg value="-XX:-UseSplitVerifier" />
            <sysproperty key="java.util.logging.config.file" value="${classes.dir}/classes/logging.properties"/>
            <classpath>
                <pathelement location="${lib.dir}/aspectjrt-1.8.0.jar"/>
                <pathelement location="${lib.dir}/aspectjweaver-1.8.0.jar"/>
                <pathelement location="${basedir}/res/META-INF/"/>
                <pathelement location="${tests.out.dir}"/>
                <path refid="test.classpath"/>
            </classpath>
        </java>
    </target>

    <target name="dtraceImageProcessing" if="junit.present" 
        depends="prepare,clean,debug,compile,JUnit,compileTests">

        <record name="${logfile}" append="yes" loglevel="debug"/>

        <!-- needs superuser privileges unless ACL has been setup -->
        
        <java classname="algorithms.imageProcessing.Run_dtrace_Test" fork="true" failonerror="true">
            <jvmarg value="-Xms512m"/>
            <jvmarg value="-Xmx1024m"/>
            <jvmarg value="-Xss1024k"/>
            <jvmarg line="-Xdebug -Xprof -XX:+UnlockExperimentalVMOptions -XX:+ExtendedDTraceProbes"/>
            <jvmarg value="-XX:-UseSplitVerifier" />
            <sysproperty key="java.util.logging.config.file" value="${classes.dir}/classes/logging.properties"/>
            <classpath>
                <pathelement location="${basedir}/res/META-INF/"/>
                <pathelement location="${tests.out.dir}"/>
                <path refid="test.classpath"/>
            </classpath>
        </java>
    </target>
    
    <!-- javadoc -->
    <target name="javadoc" depends="compile"
        description="Create Javadoc API documentation">
        <record name="${logfile}" append="yes" loglevel="info"/>
        <delete dir="${doc.dir}/api"/>
        <mkdir dir="${doc.dir}/api"/>
        <javadoc
            sourcepath="${src.dir}"
            destdir="${doc.dir}/api"
            package="true"
            packagenames="algorithms.*" >
            <classpath refid="compile.classpath"/>
        </javadoc>
    </target>

    <target name="runTests" if="junit.present" depends="prepare,clean,debug,compile,JUnit,compileTests">
        <record name="${logfile}" append="yes" loglevel="debug"/>
        <echo message="running tests, output is in ${tests.out.dir}" />
        <junit fork="true" showoutput="true" filtertrace="off" 
            printsummary="yes" haltonerror="true" haltonfailure="true">
            
            <assertions enablesystemassertions="true">
                <enable/>
            </assertions>
            
            <classpath>
                <pathelement location="${tests.out.dir}"/>
                <path refid="test.classpath"/>
            </classpath>
            <formatter type="plain" usefile="true"/>
            <sysproperty key="java.util.logging.config.file" 
                value="${src.out.dir}/logging.properties"/>

            <jvmarg value="-XX:-UseSplitVerifier" />

            <jvmarg value="-enableassertions" />
            
            <batchtest fork="true" todir="${tests.out.dir}">
                <fileset dir="${tests.out.dir}">
                    <include name="**/*Test.class"/>
               	    <exclude name= "**/*$*.class"/>
               	    <exclude name= "**/*ForTests*.class"/>
                </fileset>
            </batchtest>
        </junit>
    </target>
    
    <target name="runTest" if="junit.present" depends="prepare,clean,debug,compile,JUnit,compileTests">

        <record name="${logfile}" append="yes" loglevel="info"/>

        <fail unless="test">
            Set class to test.  example: -Dtest=algorithms.compression.huffman.HuffmanTest
        </fail>
        <echo message="${src.out.dir}/logging.properties"/>
        <junit fork="true" filtertrace="on" printsummary="yes" 
            haltonerror="true" haltonfailure="true" showoutput="true">
            
            <assertions enablesystemassertions="true">
                <enable/>
            </assertions>
            
            <classpath>
                <pathelement location="${tests.out.dir}"/>
                <path refid="test.classpath"/>
            </classpath>
            
            <jvmarg value="-XX:-UseSplitVerifier" />
            
            <formatter type="plain" usefile="true"/>

            <jvmarg value="-enableassertions" />

            <sysproperty key="java.util.logging.config.file" value="${src.out.dir}/logging.properties"/>
            <test name="${test}" fork="true" haltonfailure="yes">
                <formatter type="plain" usefile="false"/>
            </test>
            
        </junit>
    </target>

    <target name="debugTest" if="junit.present" depends="clean,prepare,debug,compile,JUnit,compileTests">
        <record name="${logfile}" append="yes" loglevel="info"/>

        <fail unless="test">
            Set class to test.  example: -Dtest=algorithms.compression.huffman.HuffmanTest
        </fail>
        <junit fork="true" showoutput="true" filtertrace="off">
            <!--<jvmarg value="-ea"/>-->
            <assertions enablesystemassertions="true">
                <enable/>
            </assertions>
            
            <jvmarg line="-enableassertions -Xdebug -Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=y -XX:-UseSplitVerifier"/>

            <sysproperty key="java.util.logging.config.file" value="${src.out.dir}/logging.properties"/>
            <classpath>
                <pathelement location="${tests.out.dir}"/>
                <path refid="test.classpath"/>
            </classpath>
            <test name="${test}" fork="true" haltonfailure="yes">
                <formatter type="plain" usefile="false"/>
            </test>
        </junit>
    </target>

    <!-- set junit.present property -->
    <target name="JUnit">
        <available property="junit.present"
            classname="junit.framework.TestCase" >
            <classpath refid="test.classpath"/>
        </available>
    </target>
    
    <condition property="jar.mf" value="${package.mf}" 
        else="${resources.dir}/scalespace.mf">
        <isset property="package.mf" />
    </condition>
    
    <target name="package" depends="clean,compile">
        <record name="${logfile}" append="yes" loglevel="debug"/>
        <echo message="making jar of class files. output is dist/scalespace.jar" />
        
        <tstamp>
            <format property="TS" pattern="yyyy-MM-dd" locale="en,US"/>
        </tstamp>
        
        <mkdir dir="${classes.dir}/tmp" />
        <unjar src="${lib.dir}/com.climbwithyourfeet.clustering.jar" dest="${classes.dir}/tmp"/>
        <move file="${classes.dir}/tmp/LICENSE.txt" tofile="${classes.dir}/tmp/Clustering_LICENSE.txt"/>
        <unjar src="${lib.dir}/ejml-0.29.jar" dest="${classes.dir}/tmp"/>
        <unjar src="${lib.dir}/jfreechart-1.0.19.jar" dest="${classes.dir}/tmp"/>
        <unjar src="${lib.dir}/jcommon-1.0.23.jar" dest="${classes.dir}/tmp"/>
        
        <!-- jfree needs the servlet jar -->
        <unjar src="${lib.dir}/servlet-api-2.5.jar" dest="${classes.dir}/tmp"/>

        <jar destfile="${classes.dir}/scalespace_${TS}.jar" manifest="${jar.mf}">
            <fileset dir="${src.out.dir}" includes="**"/>
            <fileset dir="${resources.dir}" includes="*.html"/>
            <fileset dir="${basedir}" includes="LICENSE.txt"/>
            <fileset dir="${basedir}" includes="README.txt"/>
            <fileset dir="${lib.dir}" includes="EJML_LICENSE.txt"/>
            <fileset dir="${lib.dir}" includes="JFREECHART_LICENSE.txt"/>
            <fileset dir="${classes.dir}/tmp" includes="**"/>
        </jar>
        
        <mkdir dir="dist" />
        
        <copy file="${classes.dir}/scalespace_${TS}.jar" 
            tofile="dist/scalespace.jar" />
    </target>

    <target name="runThresh" depends="clean,debug,compile" 
        description="run code to make thresholded gradient image to help make test comparisons" >
        
        <record name="${logfile}" append="yes" loglevel="info"/>

        <echo message="COMPILE debug=${compile.debug}"/>
        
        <javac srcdir="${src.dir}"
            destdir="${src.out.dir}"
            source="${compile.target}"
            debug="${compile.debug}"
            deprecation="${compile.deprecation}"
            includeAntRuntime="false"
            optimize="${compile.optimize}" >
    	    <classpath refid="test.classpath"/>
            <src path="${tests.dir}"/>
            <src path="${src.dir}"/>
            <include name="**/*SkylineTestImageMaker.java"/>
        </javac>

        <java classname="algorithms.imageProcessing.SkylineTestImageMaker" fork="true" failonerror="true">
            <jvmarg value="-Xms512m"/>
            <jvmarg value="-Xmx1024m"/>
            <jvmarg value="-XX:-UseSplitVerifier" />

            <!--
                <jvmarg line="-Xdebug -Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=y -XX:-UseSplitVerifier"/>
            -->

            <sysproperty key="java.util.logging.config.file" 
                value="${src.out.dir}/logging.properties"/>
            <classpath>
                <pathelement location="${basedir}/res/META-INF/"/>
                <pathelement location="${tests.out.dir}"/>
                <path refid="test.classpath"/>
            </classpath>
        </java>
    </target>
    
    <target name="runDependency" 
        description="run jDepend.  requires GraphViz and jDepend installed on computer" >
        
        <!-- TODO: replace w/ ant jdepend target -->
        
        <record name="${logfile}" append="yes" loglevel="info"/>
        
        <path id="jdepend.classpath">
            <pathelement location="${env.JDEPENDS_HOME}/lib/jdepend-2.9.1.jar"/>
        </path>
        
        <property name="jdepend.docs.dir" location="${env.JDEPENDS_HOME}/docs"/>
        
        <!-- user may need to edit this -->
        <property name="graphviz.bin.dir" location="/usr/local/bin"/>
        
        <mkdir dir="${classes.dir}/jdepend" />
        
        <echo message="making jDepend report"/>
        
        <java classname="jdepend.xmlui.JDepend" fork="true">
            <classpath refid="jdepend.classpath"/>
            <arg value="-file"/>
            <arg value="${jdepend.docs.dir}/jdepend-report.xml"/>
            <arg value="${src.out.dir}"/>
        </java>
   
        <echo message="creating a dot file"/>
        
        <style basedir="${jdepend.docs.dir}"
            destdir="${classes.dir}/jdepend"
            includes="jdepend-report.xml"
            extension=".dot"
            style="${env.JDEPENDS_HOME}/contrib/jdepend2dot.xsl"/>
        
        <!--
        dot -Tpng -o docs/quality/jdepend/jdepend.png docs/quality/jdepend/jdepend-report.dot
        -->
        <echo message=""/>
        <echo message="creating a png image from the dot file"/>
        <exec dir="." executable="${graphviz.bin.dir}/dot" newenvironment="true" >
            <arg line="-Tpng -o ${classes.dir}/jdepend/jdepend.png ${classes.dir}/jdepend/jdepend-report.dot"/>
        </exec>
        
        <echo message=""/>
        <echo message="creating report in html format"/>
        
        <style basedir="${jdepend.docs.dir}"
            destdir="${classes.dir}/jdepend" 
            includes="jdepend-report.xml"
            style="${env.ANT_HOME}/etc/jdepend.xsl"/>
        
        <!--
        could mv jdepend-report.html and all in ${classes.dir}/jdepend/ to docs/quality
        -->
    </target>
    
    <target name="runClassDependency" 
        description="run jdeps for a class. (requires jdk 8)" >
        
        <record name="${logfile}" append="yes" loglevel="info"/>
        
        <fail unless="class">
            Set class to test.  example: -Dclass=algorithms.imageProcessing.DistanceTransformTest
        </fail>
        
        <!-- user may need to edit this -->
        <property name="graphviz.bin.dir" location="/usr/local/bin"/>
        
        <jar destfile="${classes.dir}/tmp.jar">
            <fileset dir="${src.out.dir}" includes="**"/>
        </jar>
        
        <exec dir="." executable="jdeps" newenvironment="true" >
            <arg line="-f '(java.*)|(sun.*)' -v -verbose:class -R -cp ${classes.dir}/tmp.jar ${class}"/>
        </exec>
        
        <!--
        <exec dir="." executable="jdeps" newenvironment="true" >
            <arg line="-dotoutput ${classes.dir}/${class} -f '(java.*)|(sun.*)' -verbose:class -R -cp ${classes.dir}/tmp.jar ${class}"/>
        </exec>
        
        <echo message="creating a png image from the dot file"/>
        <exec dir="." executable="${graphviz.bin.dir}/sfdp" newenvironment="true" >
            <arg line="-Tpng -o ${classes.dir}/${class}.png ${classes.dir}/${class}/tmp.jar.dot"/>
        </exec>
        -->
    </target>
</project>
