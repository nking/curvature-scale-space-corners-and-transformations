package algorithms.misc;

import java.util.logging.Logger;

import algorithms.compGeometry.clustering.twopointcorrelation.DoubleAxisIndexer;
import static junit.framework.Assert.assertTrue;
import junit.framework.TestCase;

/**
 * @author nichole
 */
public class DoubleAxisIndexerStatsTest extends TestCase {

    protected Logger log = Logger.getLogger(this.getClass().getSimpleName());

    @Override
    protected void setUp() throws Exception {
        super.setUp();
    }

    @Override
    protected void tearDown() throws Exception {
        super.tearDown();
    }

    public void testCalculateCellDensities() throws Exception {
        
        DoubleAxisIndexerStats stats = new DoubleAxisIndexerStats();
        
        // uniform grid of data:
        
        float[] x = new float[] {
            0,  1,  2,  3,  4,  5,  6,  7,  8,
            0,  1,  2,  3,  4,  5,  6,  7,  8,
            0,  1,  2,  3,  4,  5,  6,  7,  8,
            0,  1,  2,  3,  4,  5,  6,  7,  8,
            0,  1,  2,  3,  4,  5,  6,  7,  8,
            0,  1,  2,  3,  4,  5,  6,  7,  8,
            0,  1,  2,  3,  4,  5,  6,  7,  8,
            0,  1,  2,  3,  4,  5,  6,  7,  8,
            0,  1,  2,  3,  4,  5,  6,  7,  8,
            0,  1,  2,  3,  4,  5,  6,  7,  8,
            0,  1,  2,  3,  4,  5,  6,  7,  8
        };
        float[] y = new float[] {
            0,  0,  0,  0,  0,  0,  0,  0,  0,
            1,  1,  1,  1,  1,  1,  1,  1,  1,
            2,  2,  2,  2,  2,  2,  2,  2,  2,
            3,  3,  3,  3,  3,  3,  3,  3,  3,
            4,  4,  4,  4,  4,  4,  4,  4,  4,
            5,  5,  5,  5,  5,  5,  5,  5,  5,
            6,  6,  6,  6,  6,  6,  6,  6,  6,
            7,  7,  7,  7,  7,  7,  7,  7,  7,
            8,  8,  8,  8,  8,  8,  8,  8,  8,
            9,  9,  9,  9,  9,  9,  9,  9,  9,
           10, 10, 10, 10, 10, 10, 10, 10, 10
        };
        
        int numberOfCellsInOneDimension = 2;
        
        DoubleAxisIndexer indexer = new DoubleAxisIndexer();
        indexer.sortAndIndexX(x, y, x.length);
        
        Statistic stat = stats.calculateCellDensities(numberOfCellsInOneDimension, indexer);
        
        assertNotNull(stat);
        
        float expectedAvg = (float)(indexer.getNXY()/Math.pow(numberOfCellsInOneDimension, 2));
        
        assertTrue(Math.abs(expectedAvg - stat.getAverage()) < 0.5); 
                
    }

    public void testAllAreSame() throws Exception {
        
        DoubleAxisIndexerStats stats = new DoubleAxisIndexerStats();
        
        // uniform grid of data:
        float[] x = new float[] {
            0,  1,  2,  3, 
            0,  1,  2,  3,
            0,  1,  2,  3,  
            0,  1,  2,  3
        };
        float[] y = new float[] {
            0,  0,  0,  0,
            1,  1,  1,  1, 
            2,  2,  2,  2,
            3,  3,  3,  3
        };
        
        int numberOfCellsInOneDimension = 2;
        
        DoubleAxisIndexer indexer = new DoubleAxisIndexer();
        indexer.sortAndIndexX(x, y, x.length);
     
        float fractionOutliers = stats.fractionOfCellsOutSideOfAvgTolerance
            (numberOfCellsInOneDimension, indexer, 2.5f);
        
        assertTrue(fractionOutliers < 0.1f);
    }

    public void testAllAreSame1() throws Exception {
        
        DoubleAxisIndexerStats stats = new DoubleAxisIndexerStats();
        
        // non-uniform grid of data:     
        float[] x = new float[] {
            0,  1,  2,  3,  4,  5,  6, 7, 8, 9,
            0,  1,  2,  3,  4,  5,  6, 7, 8, 9,
            0,  1,  2,  3,  4,  5,  6, 7, 8, 9,
            0,  1,  2,  3,  4,  5,  6, 7, 8, 9,
            0,  1,  2,  3,  4,  5,  6, 7, 8, 9,
            0,  1,  2,  3,  4,  5,  6, 7, 8, 9,
            0,  1,  2,  3,  4,  5,  6, 7, 8, 9,
            0,  1,  2,  3,  4,  5,  6, 7, 8, 9,
            0,  1,  2,  3,  4,  5,  6, 7, 8, 9,
            0,  1,  2,  3,  4,  5,  6, 7, 8, 9
        };
        float[] y = new float[] {
            0,  0,  0,  0,  0,  0,  0,  0, 0, 0,
            1,  1,  1,  1,  1,  1,  1,  1, 1, 1,
            2,  2,  2,  2,  2,  2,  2,  2, 2, 2,
            3,  3,  3,  3,  3,  3,  3,  3, 3, 3,
            4,  4,  4,  2,  2,  2,  2,  2, 2, 2,
            5,  5,  5,  2,  2,  2,  2,  3, 3, 3,
            6,  6,  6,  6,  6,  6,  6,  6, 6, 6,
            7,  7,  7,  7,  7,  7,  7,  7, 7, 7,
            8,  8,  8,  8,  8,  8,  8,  8, 8, 8,
            9,  9,  9,  9,  9,  9,  9,  9, 9, 9
        };
        
        int numberOfCellsInOneDimension = 3;
        
        DoubleAxisIndexer indexer = new DoubleAxisIndexer();
        indexer.sortAndIndexX(x, y, x.length);
     
        float fractionOutliers = stats.fractionOfCellsOutSideOfAvgTolerance
            (numberOfCellsInOneDimension, indexer, 2.5f);
        
        assertTrue(fractionOutliers < 0.1f);
    }
    
    public void testDoesNotHaveLargeGaps() throws Exception {
        
        DoubleAxisIndexerStats stats = new DoubleAxisIndexerStats();
                
        // non-uniform grid of data:     
        float[] x = new float[]{218.1512f, 232.56003f, 225.71799f, 225.52974f, 238.3025f, 235.99251f, 232.96109f, 233.68304f, 234.1696f, 220.51595f, 232.26994f, 226.22328f, 237.55748f, 244.25894f, 223.36075f, 241.24117f, 226.13882f, 214.61447f, 242.71104f, 204.799f, 218.23727f, 229.08458f, 221.59837f, 218.7572f, 243.17923f, 242.39685f, 224.7857f, 236.365f, 225.3001f, 212.45642f, 224.8136f, 244.4183f, 207.19066f, 236.01744f, 223.24132f, 248.17422f, 212.62167f, 209.55269f, 224.45036f, 232.42712f, 222.2786f, 231.22614f, 221.14526f, 229.75624f, 218.80176f, 241.49721f, 227.30006f, 206.87608f, 220.51303f, 226.21199f, 220.67516f, 199.45528f, 224.56296f, 235.71365f, 240.96512f, 242.27036f, 227.9635f, 220.15996f, 229.43198f, 225.10834f, 228.0837f, 244.20505f, 225.27882f, 215.1037f, 217.9359f, 247.48227f, 228.60823f, 200.44337f, 238.61826f, 225.85907f, 234.93889f, 215.45676f, 232.1994f, 234.53941f, 249.36598f, 225.32014f, 225.72946f, 240.72382f, 215.85005f, 224.43669f, 238.11147f, 224.34297f, 226.0046f, 223.16518f, 222.43759f, 214.88931f, 221.80898f, 244.6719f, 225.45143f, 217.85916f, 220.20998f, 209.39114f, 240.44106f, 248.62483f, 242.61313f, 207.42282f, 242.23578f, 223.79904f, 248.1001f, 227.87749f, 228.33998f, 238.91415f, 211.57442f, 206.0472f, 209.39365f, 214.61388f, 238.37091f, 223.53722f, 227.25137f, 230.74257f, 227.89406f, 218.81905f, 235.14294f, 221.19919f, 212.40334f, 238.19682f, 213.90637f, 251.80894f, 222.9282f, 228.20782f, 226.65034f, 223.11444f, 243.83336f, 225.06972f, 227.34834f, 222.25087f, 238.2076f, 238.16049f, 232.5808f, 211.7746f, 227.14288f, 228.27638f, 210.40715f, 230.92743f, 235.79675f, 238.87746f, 245.70233f, 202.40227f, 217.86363f, 225.52228f, 208.41345f, 221.73334f, 221.1519f, 217.2659f, 230.89616f, 245.19687f, 223.68724f, 234.68631f, 217.21776f, 222.04758f, 233.67758f, 225.68886f, 232.68733f, 232.75336f, 207.19171f, 228.3215f, 223.91824f, 223.82977f, 226.62216f, 219.68735f, 229.7342f, 233.52643f, 221.62625f, 229.18611f, 219.09312f, 224.36111f, 226.07347f, 219.00882f, 202.20615f, 217.10646f, 235.29436f, 246.57762f, 243.84923f, 225.32973f, 221.7708f, 226.20473f, 234.63855f, 213.86049f, 214.782f, 222.54984f, 212.83641f, 239.83676f, 228.02705f, 220.2326f, 211.46083f, 210.53883f, 232.44615f, 227.80014f, 227.9168f, 239.19153f, 239.22458f, 207.56326f, 233.01915f, 243.80598f, 237.33998f, 225.21086f, 208.42322f, 250.34872f, 236.20177f, 237.88596f, 216.45091f, 222.61682f, 222.9629f, 213.66772f, 235.72508f, 246.7094f, 138.37814f, 125.55033f, 141.84143f, 137.75615f, 134.0103f, 148.64076f, 147.74936f, 138.38106f, 140.08469f, 119.58264f, 127.10661f, 133.79674f, 139.67924f, 153.21951f, 121.13883f, 130.96573f, 149.00731f, 151.45619f, 137.6643f, 133.10727f, 119.50993f, 132.8048f, 124.3806f, 153.64142f, 148.7988f, 128.22923f, 129.61905f, 134.69962f, 137.70581f, 137.49382f, 128.25005f, 137.14253f, 133.49791f, 120.39836f, 119.52856f, 153.79695f, 150.31061f, 157.21675f, 131.88263f, 116.692444f, 142.5648f, 138.29584f, 132.80635f, 116.15137f, 137.24922f, 142.42163f, 141.01306f, 138.5083f, 157.34299f, 126.712906f, 132.84357f, 108.556725f, 124.99874f, 134.7508f, 112.32603f, 133.60898f, 131.90495f, 136.12473f, 135.26006f, 125.88304f, 144.2479f, 126.43564f, 126.73911f, 146.47742f, 136.8093f, 139.72318f, 146.36969f, 124.9775f, 113.85495f, 134.79144f, 144.31783f, 134.51233f, 133.35156f, 141.18823f, 134.94223f, 142.85753f, 138.05428f, 126.37114f, 137.26166f, 129.78285f, 134.35165f, 148.91716f, 140.38568f, 127.66412f, 132.0164f, 121.17002f, 125.31237f, 149.46422f, 126.65373f, 118.80971f, 132.14644f, 122.10546f, 135.33078f, 136.47575f, 128.24728f, 135.13399f, 142.02403f, 146.27043f, 153.80745f, 153.30568f, 134.86528f, 107.900276f, 148.4513f, 153.28734f, 119.90191f, 124.909096f, 133.06111f, 133.5698f, 129.61578f, 131.76993f, 132.44374f, 148.21054f, 140.51f, 134.11406f, 150.08981f, 112.273285f, 135.75444f, 144.2753f, 132.62875f, 134.56602f, 113.028885f, 140.05405f, 128.25365f, 127.267784f, 140.8912f, 128.58958f, 145.22127f, 117.36466f, 127.01857f, 127.428276f, 114.88858f, 143.0261f, 141.85052f, 134.78848f, 148.31677f, 131.79912f, 133.12163f, 153.33469f, 116.29544f, 139.52013f, 110.33788f, 128.4847f, 133.08777f, 151.06474f, 147.77527f, 149.5546f, 142.47823f, 122.60432f, 116.951805f, 140.63051f, 138.69652f, 140.59795f, 114.85799f, 152.11646f, 122.10403f, 145.15947f, 136.6195f, 120.011284f, 152.61067f, 132.87674f, 144.65625f, 129.76782f, 131.79045f, 141.4031f, 135.13255f, 158.45381f, 142.2841f, 136.96524f, 138.03156f, 134.41908f, 138.2384f, 133.7136f, 120.054756f, 112.786125f, 131.98788f, 116.88737f, 135.5947f, 150.79138f, 130.83281f, 110.04017f, 148.04402f, 151.46436f, 125.16138f, 137.04494f, 127.30955f, 134.20204f, 131.21373f, 135.83212f, 143.91174f, 134.13037f, 137.57271f, 146.13586f, 112.980385f, 116.64752f, 152.50322f, 133.86565f, 130.60901f, 123.724915f, 138.48338f, 133.2843f, 124.70931f, 132.97792f, 151.26955f, 133.0703f, 130.80939f, 133.6558f, 147.33437f, 134.3183f, 115.09254f, 139.20045f, 139.32576f, 137.31981f, 129.82704f, 120.06133f, 120.51498f, 138.64655f, 154.71745f, 133.67398f, 132.31725f, 127.65642f, 129.95853f, 146.99472f, 132.46326f, 138.16515f, 128.69817f, 128.21936f, 156.64624f, 133.75893f, 125.797455f, 134.42725f, 142.91171f, 142.35597f, 135.72992f, 139.26979f, 150.09f, 135.71893f, 115.37175f, 119.601944f, 123.99951f, 130.41478f, 132.22966f, 134.7253f, 125.6438f, 43.972515f, 45.579704f, 58.770737f, 42.544533f, 63.240532f, 47.924923f, 32.70428f, 69.95853f, 39.684914f, 46.231686f, 61.771015f, 53.588554f, 33.887714f, 37.132137f, 50.854202f, 54.747723f, 42.448254f, 47.178288f, 38.926914f, 63.475994f, 59.91641f, 43.956116f, 45.50094f, 34.799007f, 58.774395f, 41.29745f, 51.40714f, 52.9671f, 45.794037f, 50.953323f, 66.82527f, 56.649086f, 49.10386f, 51.486618f, 61.63773f, 51.857006f, 50.63338f, 50.329163f, 59.41421f, 63.415997f, 40.803345f, 31.071695f, 42.091446f, 57.23561f, 54.051342f, 34.182327f, 54.374664f, 46.509075f, 74.48453f, 48.65245f, 28.654697f, 42.18705f, 58.761513f, 48.314323f, 42.30949f, 50.028034f, 69.03088f, 33.779644f, 34.64454f, 40.282623f, 47.61997f, 52.223083f, 63.26082f, 42.438313f, 68.03711f, 54.13566f, 27.603893f, 48.27768f, 70.40103f, 53.2234f, 25.602186f, 47.70453f, 28.387987f, 42.78449f, 26.420815f, 58.25467f, 48.217133f, 49.62429f, 57.49454f, 27.00857f, 35.229813f, 36.01097f, 47.48988f, 66.68636f, 55.862514f, 48.2802f, 49.83084f, 46.734856f, 41.192234f, 50.15772f, 49.229053f, 48.03859f, 27.031744f, 64.675156f, 33.449226f, 44.441914f, 27.585623f, 45.269176f, 43.731575f, 54.611324f, 64.2264f, 28.372164f, 61.448013f, 61.449448f, 52.777134f, 43.081066f, 48.306408f, 58.367264f, 43.292137f, 42.273853f, 59.02506f, 50.533974f, 27.57755f, 47.007137f, 41.46226f, 64.68877f, 37.528435f, 58.21288f, 57.1027f, 44.23185f, 40.340645f, 65.85647f, 67.155396f, 59.18882f, 47.28062f, 47.13514f, 49.937305f, 33.521725f, 66.63697f, 49.448856f, 55.142414f, 65.857574f, 23.036114f, 54.40857f, 47.15495f, 56.346756f, 48.5092f, 48.18348f, 60.427444f, 62.86696f, 48.22868f, 30.630003f, 60.46225f, 32.9378f, 30.721731f, 51.060513f, 44.07f, 37.117313f, 43.987453f, 44.80299f, 49.13941f, 32.064617f, 68.811676f, 59.221897f, 46.67035f, 58.051037f, 31.839012f, 61.323112f, 35.511303f, 57.90964f, 24.644295f, 45.732113f, 45.66881f, 53.65721f, 65.01109f, 43.775707f, 53.298347f, 30.284227f, 46.08111f, 51.192623f, 49.09114f, 56.651318f, 35.88882f, 55.51568f, 39.73773f, 74.01297f, 52.917946f, 50.59352f, 39.544456f, 39.693317f, 45.86445f, 29.000834f, 40.571373f, 40.229588f, 43.0231f, 56.625843f, 66.2988f, 44.988506f, 53.692787f, 47.125973f, 50.487793f, 48.743206f, 53.395027f, 28.86628f, 48.61093f, 45.58564f, 34.304375f, 67.10715f, 22.936066f, 48.670124f, 72.04473f, 53.46151f, 64.50049f, 70.3844f, 48.43984f, 60.94235f, 25.30266f, 30.097958f, 40.732964f, 45.40124f, 48.146194f, 38.50803f, 50.289196f, 46.407276f, 48.913853f, 37.001995f, 54.865578f, 63.258102f, 49.897213f, 47.62973f, 54.2333f, 47.609707f, 46.56884f, 48.355183f, 45.75496f, 46.78592f, 27.582226f, 35.357338f, 51.100296f, 28.471472f, 58.689987f, 56.710903f, 43.404137f, 52.8223f, 34.878956f, 53.542347f, 33.47577f, 31.829699f, 47.5754f, 49.084507f, 55.30211f, 54.337307f, 47.744614f, 48.11709f, 31.27006f, 60.367928f, 65.94179f, 52.933243f, 42.725502f, 58.56619f, 31.434711f, 47.549767f, 39.03609f, 26.777573f, 59.63787f, 41.96872f, 48.285236f, 45.13884f, 45.307953f, 45.789646f, 44.073704f, 55.419632f, 65.04265f, 56.57353f, 48.33966f, 43.12184f, 46.186623f, 26.210566f, 26.813612f, 50.86721f, 58.349564f, 53.33783f, 55.800144f, 59.241207f};
        
        float[] y = new float[]{152.45584f, 128.26845f, 138.78702f, 137.50963f, 120.54667f, 156.34853f, 140.90396f, 138.47618f, 126.52102f, 118.34909f, 132.0166f, 137.94797f, 134.40057f, 119.56315f, 136.87575f, 130.07797f, 137.03099f, 129.82805f, 138.73615f, 124.51754f, 144.89157f, 133.50374f, 149.1896f, 136.2338f, 124.39882f, 128.79356f, 120.099335f, 133.58038f, 136.7985f, 156.81308f, 140.33649f, 125.029465f, 154.42188f, 161.49118f, 129.59793f, 144.14061f, 122.52272f, 132.97293f, 142.1826f, 142.2473f, 135.06456f, 131.30202f, 132.5061f, 137.14288f, 155.56038f, 138.5315f, 128.35736f, 124.258194f, 116.604576f, 135.54521f, 132.04375f, 137.32541f, 117.18335f, 144.36415f, 124.32322f, 120.48625f, 124.59688f, 148.93822f, 155.88387f, 131.01314f, 118.4656f, 143.34343f, 138.81718f, 133.72806f, 119.36356f, 141.50424f, 153.47127f, 141.25034f, 139.15132f, 137.17519f, 133.92213f, 136.15088f, 127.52969f, 123.8663f, 142.3299f, 136.6881f, 135.68854f, 116.8675f, 154.6498f, 143.17793f, 154.48915f, 137.58865f, 135.14368f, 134.89589f, 146.72871f, 117.25477f, 143.42429f, 135.06473f, 133.01526f, 128.52122f, 141.12729f, 146.15938f, 127.44725f, 126.30406f, 141.92078f, 155.89688f, 135.62758f, 132.17812f, 133.16742f, 144.24435f, 154.33421f, 148.65927f, 140.29514f, 142.52983f, 142.2246f, 133.96063f, 143.90025f, 148.26906f, 138.03049f, 139.55298f, 162.63696f, 135.8522f, 146.93954f, 138.22115f, 127.160965f, 145.00658f, 130.67375f, 141.14003f, 137.95837f, 145.63293f, 139.86948f, 120.654396f, 118.779884f, 163.11638f, 143.67491f, 148.49606f, 119.841385f, 143.7204f, 116.461494f, 120.926216f, 138.26463f, 135.85706f, 128.04037f, 137.00594f, 132.62608f, 151.99133f, 130.13554f, 137.01848f, 141.70592f, 147.60759f, 141.99318f, 145.41647f, 134.59016f, 118.77083f, 153.40018f, 151.47643f, 149.10172f, 130.25209f, 121.21578f, 122.5696f, 144.1108f, 136.52518f, 136.2761f, 136.18542f, 147.29753f, 155.79968f, 118.35666f, 141.60385f, 142.1077f, 116.30395f, 137.1108f, 144.41888f, 140.33961f, 116.05307f, 141.31749f, 135.08195f, 140.97112f, 143.36057f, 126.88371f, 155.59087f, 136.96231f, 139.6881f, 149.86037f, 136.07195f, 143.83755f, 127.61443f, 139.47f, 115.44065f, 149.65108f, 135.11188f, 116.30086f, 157.98497f, 127.35037f, 156.48569f, 135.75781f, 122.28524f, 123.45233f, 139.16722f, 155.71849f, 122.858826f, 155.93805f, 124.01353f, 152.28365f, 151.21198f, 142.85934f, 115.13977f, 134.41469f, 141.06454f, 127.95723f, 149.96947f, 142.26483f, 117.88272f, 136.97281f, 120.15562f, 138.10956f, 152.23982f, 105.229836f, 89.46689f, 119.19664f, 104.72738f, 108.53764f, 131.25381f, 123.61885f, 126.5422f, 108.97411f, 110.63124f, 107.233345f, 92.15469f, 100.58726f, 111.25038f, 112.69886f, 106.89612f, 110.571236f, 122.23603f, 117.13915f, 103.61319f, 107.45355f, 110.12675f, 84.15063f, 94.03714f, 114.005104f, 114.15467f, 103.955574f, 105.12642f, 120.40017f, 113.24673f, 95.53988f, 121.84357f, 98.801f, 89.81347f, 101.53744f, 96.98747f, 121.89881f, 108.75739f, 107.76622f, 97.89325f, 124.88067f, 114.50178f, 85.41976f, 118.68054f, 111.43163f, 117.93175f, 105.20765f, 111.40252f, 111.51446f, 83.50539f, 108.66833f, 102.79832f, 109.298935f, 114.69783f, 116.83168f, 109.1331f, 109.01217f, 116.26713f, 107.26467f, 122.72319f, 96.737785f, 104.2281f, 110.71971f, 101.6488f, 110.16033f, 114.61473f, 128.13104f, 104.08741f, 105.35431f, 110.11365f, 101.207504f, 115.78332f, 109.99666f, 123.108185f, 109.4727f, 121.865036f, 114.02424f, 92.95637f, 117.07472f, 95.50723f, 109.73611f, 113.32932f, 93.334755f, 90.487885f, 107.31165f, 129.81482f, 125.3325f, 102.899284f, 90.00067f, 91.030304f, 128.34921f, 110.023865f, 124.38362f, 118.554344f, 111.27848f, 107.930855f, 116.8303f, 93.265724f, 101.307884f, 105.88523f, 104.94955f, 110.368256f, 119.30832f, 120.08534f, 93.67129f, 111.359726f, 111.103035f, 126.759895f, 103.37935f, 108.49567f, 110.44713f, 130.11752f, 111.25944f, 92.732834f, 119.43275f, 106.299194f, 107.426956f, 113.821945f, 98.74225f, 110.34986f, 117.567215f, 112.62298f, 125.94396f, 93.38841f, 121.1263f, 104.80964f, 109.62217f, 104.59473f, 110.07274f, 123.83846f, 100.65047f, 117.213776f, 115.37014f, 109.57066f, 106.50506f, 97.154305f, 115.45194f, 120.68846f, 114.69909f, 103.06755f, 97.54383f, 107.65235f, 112.076195f, 122.51339f, 107.38907f, 92.43806f, 103.11533f, 103.00471f, 91.35571f, 111.619f, 113.43521f, 115.74355f, 94.76373f, 93.26911f, 111.38626f, 90.964935f, 101.11427f, 99.119545f, 117.462395f, 120.259735f, 110.76116f, 107.7134f, 104.77533f, 85.45846f, 133.37123f, 110.66713f, 118.07981f, 109.472145f, 103.33747f, 111.60066f, 105.916f, 94.832924f, 103.87624f, 110.566086f, 103.689705f, 105.35074f, 104.091125f, 118.329956f, 106.38124f, 118.19708f, 124.689995f, 89.81713f, 109.183495f, 119.91872f, 129.29088f, 108.38336f, 90.48075f, 112.4393f, 106.36588f, 108.78106f, 114.270256f, 105.56141f, 107.16856f, 125.48077f, 117.796455f, 114.15963f, 126.59732f, 127.35699f, 91.58427f, 96.62774f, 108.49817f, 113.42054f, 121.14658f, 98.17534f, 97.42989f, 107.47419f, 121.469666f, 105.691864f, 125.56188f, 114.609085f, 114.37042f, 90.70398f, 108.81021f, 130.89598f, 128.74911f, 111.90778f, 95.58927f, 108.894844f, 131.65399f, 108.38259f, 110.38436f, 131.78023f, 112.93393f, 118.30696f, 106.544716f, 95.67459f, 100.83841f, 123.307465f, 99.77082f, 109.78443f, 105.65386f, 121.02125f, 105.666885f, 115.39167f, 98.0955f, 105.58692f, 91.56573f, 123.53626f, 97.87168f, 109.306244f, 112.24957f, 96.3885f, 116.50894f, 216.88211f, 211.03075f, 227.9931f, 218.8785f, 229.15633f, 214.9203f, 206.9601f, 201.87224f, 206.9082f, 215.22752f, 218.7742f, 195.08456f, 220.52263f, 232.59235f, 212.80792f, 199.4206f, 209.89082f, 212.4731f, 199.57397f, 233.33914f, 204.17421f, 218.29402f, 216.61359f, 235.38443f, 208.79901f, 217.3582f, 209.45297f, 205.153f, 237.11156f, 208.7198f, 225.34496f, 204.12885f, 226.74025f, 212.66246f, 210.5916f, 224.80014f, 226.68146f, 214.1261f, 215.29193f, 210.63522f, 199.01736f, 219.82661f, 231.27696f, 225.16159f, 207.23785f, 217.35646f, 213.97939f, 214.18776f, 218.31139f, 214.99037f, 209.97781f, 229.072f, 212.04015f, 214.47113f, 221.98972f, 215.67337f, 212.0777f, 236.42473f, 217.8108f, 212.79211f, 211.92307f, 201.97894f, 229.35405f, 213.74365f, 213.98856f, 211.78354f, 219.53297f, 213.34323f, 201.6328f, 208.97917f, 202.56558f, 210.11977f, 202.8224f, 194.60262f, 210.93994f, 230.0373f, 215.3567f, 214.44836f, 200.48685f, 199.96625f, 221.44492f, 213.72101f, 214.506f, 207.72289f, 199.58337f, 214.76132f, 213.37491f, 212.38164f, 202.96907f, 215.53069f, 216.05759f, 202.9437f, 201.57536f, 218.99641f, 223.18478f, 218.74432f, 229.11142f, 227.81607f, 214.18251f, 202.42899f, 230.66756f, 203.1379f, 222.51965f, 211.09756f, 219.46399f, 217.44647f, 214.11845f, 219.48859f, 206.36426f, 228.39857f, 221.76372f, 208.78624f, 198.10591f, 217.51372f, 219.86288f, 202.41129f, 202.5459f, 197.38022f, 213.5187f, 207.90623f, 211.76498f, 211.06956f, 231.52144f, 221.45036f, 217.0061f, 215.57825f, 217.76491f, 197.80595f, 217.57544f, 206.87555f, 205.28455f, 204.93457f, 218.15392f, 211.77725f, 216.99638f, 190.50053f, 214.77545f, 213.65784f, 235.35829f, 199.05583f, 192.34995f, 200.79274f, 214.00685f, 206.14133f, 226.81631f, 217.10358f, 204.04765f, 217.73575f, 214.82451f, 213.73589f, 212.53252f, 220.15182f, 207.36414f, 209.40877f, 215.81187f, 231.43394f, 195.24133f, 206.19852f, 213.28764f, 224.73996f, 222.15726f, 203.33359f, 216.14755f, 213.91971f, 214.66714f, 217.42097f, 223.95015f, 211.27478f, 215.32178f, 217.06921f, 212.32437f, 221.21094f, 226.76689f, 217.86513f, 219.29942f, 208.20132f, 208.73067f, 213.64047f, 223.24095f, 196.64278f, 212.37639f, 200.57819f, 196.30537f, 228.9178f, 212.28574f, 214.65291f, 198.67973f, 213.82896f, 197.53613f, 237.39603f, 216.96736f, 214.00517f, 211.27402f, 226.45697f, 221.28664f, 214.46309f, 215.54149f, 223.96866f, 207.6945f, 214.704f, 226.28429f, 214.86816f, 220.81491f, 217.2808f, 213.7422f, 235.59923f, 217.90068f, 208.53241f, 191.17152f, 218.10283f, 213.53818f, 204.06328f, 213.87633f, 235.71443f, 214.67334f, 226.46606f, 217.06389f, 212.49765f, 211.70927f, 212.32263f, 216.34335f, 214.0418f, 214.73041f, 215.7339f, 209.91806f, 221.58194f, 205.67442f, 219.65808f, 225.12567f, 211.835f, 217.74463f, 226.36281f, 222.2631f, 226.58185f, 213.12508f, 229.90088f, 198.91864f, 221.26157f, 220.87384f, 209.09119f, 215.4112f, 240.06317f, 221.54335f, 216.64032f, 222.94444f, 219.75975f, 221.88788f, 218.70485f, 197.56642f, 221.66109f, 201.27728f, 217.21025f, 201.10378f, 220.0821f, 227.57681f, 238.60709f, 216.83002f, 217.53633f, 222.06577f, 209.57593f, 238.04489f, 205.89552f, 220.60606f, 216.11693f, 236.11761f, 225.56319f, 223.8494f, 211.40436f, 211.12102f, 210.77403f, 202.09386f, 237.0168f, 234.95442f, 201.42583f};
        
        int numberOfCellsInOneDimension = 3;
        
        DoubleAxisIndexer indexer = new DoubleAxisIndexer();
        indexer.sortAndIndexX(x, y, x.length);
     
        boolean same = stats.doesNotHaveLargeGaps(numberOfCellsInOneDimension, indexer, 2.5f);
        
        assertFalse(same);
    }
    
    public void testDoesNotHaveLargeGaps2() throws Exception {
        
        DoubleAxisIndexerStats stats = new DoubleAxisIndexerStats();
                
        float[] x = new float[] {
            0,  1,  2,  3, 
            0,  1,  2,  3,
            0,  1,  2,  3,  
            0,  1,  2,  3
        };
        float[] y = new float[] {
            0,  0,  0,  0,
            1,  1,  1,  1, 
            2,  2,  2,  2,
            3,  3,  3,  3
        };
        
        int numberOfCellsInOneDimension = 3;
        
        DoubleAxisIndexer indexer = new DoubleAxisIndexer();
        indexer.sortAndIndexX(x, y, x.length);
     
        float fractionOutliers = stats.fractionOfCellsOutSideOfAvgTolerance
            (numberOfCellsInOneDimension, indexer, 2.5f);
        
        assertTrue(fractionOutliers < 0.1f);
    }
    
    public void testChooseARandomCell() throws Exception {
        
        DoubleAxisIndexerStats stats = new DoubleAxisIndexerStats();
        
        float[] x = new float[] {
            0,  1,  2,  3, 
            0,  1,  2,  3,
            0,  1,  2,  3,  
            0,  1,  2,  3
        };
        float[] y = new float[] {
            0,  0,  0,  0,
            1,  1,  1,  1, 
            2,  2,  2,  2,
            3,  3,  3,  3
        };
        
        int numberOfCellsInOneDimension = 2;
        
        DoubleAxisIndexer indexer = new DoubleAxisIndexer();
        indexer.sortAndIndexX(x, y, x.length);
        
        int[] indexRanges = stats.chooseARandomCell(numberOfCellsInOneDimension, indexer);
        
        assertNotNull(indexRanges);
        
        assertTrue(indexRanges[0] < indexRanges[1]);
                        
        assertTrue(indexRanges[2] < indexRanges[3]);
                
    }
}
